// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trader.proto

package poolrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	auctioneerrpc "github.com/lightninglabs/pool/auctioneerrpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AccountState int32

const (
	// The state of an account when it is pending its confirmation on-chain.
	AccountState_PENDING_OPEN AccountState = 0
	//
	//The state of an account when it has undergone an update on-chain either as
	//part of a matched order or a trader modification and it is pending its
	//confirmation on-chain.
	AccountState_PENDING_UPDATE AccountState = 1
	// The state of an account once it has confirmed on-chain.
	AccountState_OPEN AccountState = 2
	//
	//The state of an account once its expiration has been reached and its closing
	//transaction has confirmed.
	AccountState_EXPIRED AccountState = 3
	//
	//The state of an account when we're waiting for the closing transaction of
	//an account to confirm that required cooperation with the auctioneer.
	AccountState_PENDING_CLOSED AccountState = 4
	// The state of an account once its closing transaction has confirmed.
	AccountState_CLOSED AccountState = 5
	//
	//The state of an account that indicates that the account was attempted to be
	//recovered but failed because the opening transaction wasn't found by lnd.
	//This could be because it was never published or it never confirmed. Then the
	//funds are SAFU and the account can be considered to never have been opened
	//in the first place.
	AccountState_RECOVERY_FAILED AccountState = 6
	//
	//The account has recently participated in a batch and is not yet confirmed.
	AccountState_PENDING_BATCH AccountState = 7
)

var AccountState_name = map[int32]string{
	0: "PENDING_OPEN",
	1: "PENDING_UPDATE",
	2: "OPEN",
	3: "EXPIRED",
	4: "PENDING_CLOSED",
	5: "CLOSED",
	6: "RECOVERY_FAILED",
	7: "PENDING_BATCH",
}

var AccountState_value = map[string]int32{
	"PENDING_OPEN":    0,
	"PENDING_UPDATE":  1,
	"OPEN":            2,
	"EXPIRED":         3,
	"PENDING_CLOSED":  4,
	"CLOSED":          5,
	"RECOVERY_FAILED": 6,
	"PENDING_BATCH":   7,
}

func (x AccountState) String() string {
	return proto.EnumName(AccountState_name, int32(x))
}

func (AccountState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{0}
}

type MatchState int32

const (
	//
	//The OrderMatchPrepare message from the auctioneer was received initially.
	MatchState_PREPARE MatchState = 0
	//
	//The OrderMatchPrepare message from the auctioneer was processed successfully
	//and the batch was accepted.
	MatchState_ACCEPTED MatchState = 1
	//
	//The order was rejected by the trader daemon, either as an answer to a
	//OrderMatchSignBegin or OrderMatchFinalize message from the auctioneer.
	MatchState_REJECTED MatchState = 2
	//
	//The OrderMatchSignBegin message from the auctioneer was processed
	//successfully.
	MatchState_SIGNED MatchState = 3
	//
	//The OrderMatchFinalize message from the auctioneer was processed
	//successfully.
	MatchState_FINALIZED MatchState = 4
)

var MatchState_name = map[int32]string{
	0: "PREPARE",
	1: "ACCEPTED",
	2: "REJECTED",
	3: "SIGNED",
	4: "FINALIZED",
}

var MatchState_value = map[string]int32{
	"PREPARE":   0,
	"ACCEPTED":  1,
	"REJECTED":  2,
	"SIGNED":    3,
	"FINALIZED": 4,
}

func (x MatchState) String() string {
	return proto.EnumName(MatchState_name, int32(x))
}

func (MatchState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{1}
}

type MatchRejectReason int32

const (
	// No reject occurred, this is the default value.
	MatchRejectReason_NONE MatchRejectReason = 0
	//
	//The client didn't come up with the same result as the server and is
	//rejecting the batch because of that.
	MatchRejectReason_SERVER_MISBEHAVIOR MatchRejectReason = 1
	//
	//The client doesn't support the current batch verification version the
	//server is using.
	MatchRejectReason_BATCH_VERSION_MISMATCH MatchRejectReason = 2
	//
	//The client rejects some of the orders, not the full batch. This reason is
	//set on matches for orders that were in the same batch as partial reject ones
	//but were not themselves rejected.
	MatchRejectReason_PARTIAL_REJECT_COLLATERAL MatchRejectReason = 3
	//
	//The trader's client has a preference to only match orders with peers it
	//doesn't already have channels with. The order that is rejected with this
	//reason type comes from a peer that the trader already has channels with.
	MatchRejectReason_PARTIAL_REJECT_DUPLICATE_PEER MatchRejectReason = 4
	//
	//The trader's client couldn't connect to the remote node of the matched
	//order or the channel funding could not be initialized for another
	//reason. This could also be the rejecting node's fault if their
	//connection is not stable. Using this code can have a negative impact on
	//the reputation score of both nodes, depending on the number of errors
	//recorded.
	MatchRejectReason_PARTIAL_REJECT_CHANNEL_FUNDING_FAILED MatchRejectReason = 5
)

var MatchRejectReason_name = map[int32]string{
	0: "NONE",
	1: "SERVER_MISBEHAVIOR",
	2: "BATCH_VERSION_MISMATCH",
	3: "PARTIAL_REJECT_COLLATERAL",
	4: "PARTIAL_REJECT_DUPLICATE_PEER",
	5: "PARTIAL_REJECT_CHANNEL_FUNDING_FAILED",
}

var MatchRejectReason_value = map[string]int32{
	"NONE":                                  0,
	"SERVER_MISBEHAVIOR":                    1,
	"BATCH_VERSION_MISMATCH":                2,
	"PARTIAL_REJECT_COLLATERAL":             3,
	"PARTIAL_REJECT_DUPLICATE_PEER":         4,
	"PARTIAL_REJECT_CHANNEL_FUNDING_FAILED": 5,
}

func (x MatchRejectReason) String() string {
	return proto.EnumName(MatchRejectReason_name, int32(x))
}

func (MatchRejectReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{2}
}

type InitAccountRequest struct {
	AccountValue uint64 `protobuf:"varint,1,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	// Types that are valid to be assigned to AccountExpiry:
	//	*InitAccountRequest_AbsoluteHeight
	//	*InitAccountRequest_RelativeHeight
	AccountExpiry isInitAccountRequest_AccountExpiry `protobuf_oneof:"account_expiry"`
	// Types that are valid to be assigned to Fees:
	//	*InitAccountRequest_ConfTarget
	Fees isInitAccountRequest_Fees `protobuf_oneof:"fees"`
	//
	//An optional identification string that will be appended to the user agent
	//string sent to the server to give information about the usage of pool. This
	//initiator part is meant for user interfaces to add their name to give the
	//full picture of the binary used (poold, LiT) and the method used for opening
	//the account (pool CLI, LiT UI, other 3rd party UI).
	Initiator            string   `protobuf:"bytes,5,opt,name=initiator,proto3" json:"initiator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitAccountRequest) Reset()         { *m = InitAccountRequest{} }
func (m *InitAccountRequest) String() string { return proto.CompactTextString(m) }
func (*InitAccountRequest) ProtoMessage()    {}
func (*InitAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{0}
}

func (m *InitAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitAccountRequest.Unmarshal(m, b)
}
func (m *InitAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitAccountRequest.Marshal(b, m, deterministic)
}
func (m *InitAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitAccountRequest.Merge(m, src)
}
func (m *InitAccountRequest) XXX_Size() int {
	return xxx_messageInfo_InitAccountRequest.Size(m)
}
func (m *InitAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitAccountRequest proto.InternalMessageInfo

func (m *InitAccountRequest) GetAccountValue() uint64 {
	if m != nil {
		return m.AccountValue
	}
	return 0
}

type isInitAccountRequest_AccountExpiry interface {
	isInitAccountRequest_AccountExpiry()
}

type InitAccountRequest_AbsoluteHeight struct {
	AbsoluteHeight uint32 `protobuf:"varint,2,opt,name=absolute_height,json=absoluteHeight,proto3,oneof"`
}

type InitAccountRequest_RelativeHeight struct {
	RelativeHeight uint32 `protobuf:"varint,3,opt,name=relative_height,json=relativeHeight,proto3,oneof"`
}

func (*InitAccountRequest_AbsoluteHeight) isInitAccountRequest_AccountExpiry() {}

func (*InitAccountRequest_RelativeHeight) isInitAccountRequest_AccountExpiry() {}

func (m *InitAccountRequest) GetAccountExpiry() isInitAccountRequest_AccountExpiry {
	if m != nil {
		return m.AccountExpiry
	}
	return nil
}

func (m *InitAccountRequest) GetAbsoluteHeight() uint32 {
	if x, ok := m.GetAccountExpiry().(*InitAccountRequest_AbsoluteHeight); ok {
		return x.AbsoluteHeight
	}
	return 0
}

func (m *InitAccountRequest) GetRelativeHeight() uint32 {
	if x, ok := m.GetAccountExpiry().(*InitAccountRequest_RelativeHeight); ok {
		return x.RelativeHeight
	}
	return 0
}

type isInitAccountRequest_Fees interface {
	isInitAccountRequest_Fees()
}

type InitAccountRequest_ConfTarget struct {
	ConfTarget uint32 `protobuf:"varint,4,opt,name=conf_target,json=confTarget,proto3,oneof"`
}

func (*InitAccountRequest_ConfTarget) isInitAccountRequest_Fees() {}

func (m *InitAccountRequest) GetFees() isInitAccountRequest_Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *InitAccountRequest) GetConfTarget() uint32 {
	if x, ok := m.GetFees().(*InitAccountRequest_ConfTarget); ok {
		return x.ConfTarget
	}
	return 0
}

func (m *InitAccountRequest) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InitAccountRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InitAccountRequest_AbsoluteHeight)(nil),
		(*InitAccountRequest_RelativeHeight)(nil),
		(*InitAccountRequest_ConfTarget)(nil),
	}
}

type QuoteAccountRequest struct {
	AccountValue uint64 `protobuf:"varint,1,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	// Types that are valid to be assigned to Fees:
	//	*QuoteAccountRequest_ConfTarget
	Fees                 isQuoteAccountRequest_Fees `protobuf_oneof:"fees"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *QuoteAccountRequest) Reset()         { *m = QuoteAccountRequest{} }
func (m *QuoteAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QuoteAccountRequest) ProtoMessage()    {}
func (*QuoteAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{1}
}

func (m *QuoteAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteAccountRequest.Unmarshal(m, b)
}
func (m *QuoteAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteAccountRequest.Marshal(b, m, deterministic)
}
func (m *QuoteAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteAccountRequest.Merge(m, src)
}
func (m *QuoteAccountRequest) XXX_Size() int {
	return xxx_messageInfo_QuoteAccountRequest.Size(m)
}
func (m *QuoteAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteAccountRequest proto.InternalMessageInfo

func (m *QuoteAccountRequest) GetAccountValue() uint64 {
	if m != nil {
		return m.AccountValue
	}
	return 0
}

type isQuoteAccountRequest_Fees interface {
	isQuoteAccountRequest_Fees()
}

type QuoteAccountRequest_ConfTarget struct {
	ConfTarget uint32 `protobuf:"varint,2,opt,name=conf_target,json=confTarget,proto3,oneof"`
}

func (*QuoteAccountRequest_ConfTarget) isQuoteAccountRequest_Fees() {}

func (m *QuoteAccountRequest) GetFees() isQuoteAccountRequest_Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QuoteAccountRequest) GetConfTarget() uint32 {
	if x, ok := m.GetFees().(*QuoteAccountRequest_ConfTarget); ok {
		return x.ConfTarget
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QuoteAccountRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QuoteAccountRequest_ConfTarget)(nil),
	}
}

type QuoteAccountResponse struct {
	MinerFeeRateSatPerKw uint64   `protobuf:"varint,1,opt,name=miner_fee_rate_sat_per_kw,json=minerFeeRateSatPerKw,proto3" json:"miner_fee_rate_sat_per_kw,omitempty"`
	MinerFeeTotal        uint64   `protobuf:"varint,2,opt,name=miner_fee_total,json=minerFeeTotal,proto3" json:"miner_fee_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteAccountResponse) Reset()         { *m = QuoteAccountResponse{} }
func (m *QuoteAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QuoteAccountResponse) ProtoMessage()    {}
func (*QuoteAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{2}
}

func (m *QuoteAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteAccountResponse.Unmarshal(m, b)
}
func (m *QuoteAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteAccountResponse.Marshal(b, m, deterministic)
}
func (m *QuoteAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteAccountResponse.Merge(m, src)
}
func (m *QuoteAccountResponse) XXX_Size() int {
	return xxx_messageInfo_QuoteAccountResponse.Size(m)
}
func (m *QuoteAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteAccountResponse proto.InternalMessageInfo

func (m *QuoteAccountResponse) GetMinerFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.MinerFeeRateSatPerKw
	}
	return 0
}

func (m *QuoteAccountResponse) GetMinerFeeTotal() uint64 {
	if m != nil {
		return m.MinerFeeTotal
	}
	return 0
}

type ListAccountsRequest struct {
	//
	//Only list accounts that are still active.
	ActiveOnly           bool     `protobuf:"varint,1,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAccountsRequest) Reset()         { *m = ListAccountsRequest{} }
func (m *ListAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAccountsRequest) ProtoMessage()    {}
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{3}
}

func (m *ListAccountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAccountsRequest.Unmarshal(m, b)
}
func (m *ListAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAccountsRequest.Marshal(b, m, deterministic)
}
func (m *ListAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsRequest.Merge(m, src)
}
func (m *ListAccountsRequest) XXX_Size() int {
	return xxx_messageInfo_ListAccountsRequest.Size(m)
}
func (m *ListAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsRequest proto.InternalMessageInfo

func (m *ListAccountsRequest) GetActiveOnly() bool {
	if m != nil {
		return m.ActiveOnly
	}
	return false
}

type ListAccountsResponse struct {
	Accounts             []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListAccountsResponse) Reset()         { *m = ListAccountsResponse{} }
func (m *ListAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAccountsResponse) ProtoMessage()    {}
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{4}
}

func (m *ListAccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAccountsResponse.Unmarshal(m, b)
}
func (m *ListAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAccountsResponse.Marshal(b, m, deterministic)
}
func (m *ListAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsResponse.Merge(m, src)
}
func (m *ListAccountsResponse) XXX_Size() int {
	return xxx_messageInfo_ListAccountsResponse.Size(m)
}
func (m *ListAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsResponse proto.InternalMessageInfo

func (m *ListAccountsResponse) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type Output struct {
	// The value, in satoshis, of the output.
	ValueSat uint64 `protobuf:"varint,1,opt,name=value_sat,json=valueSat,proto3" json:"value_sat,omitempty"`
	// The address corresponding to the output.
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{5}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetValueSat() uint64 {
	if m != nil {
		return m.ValueSat
	}
	return 0
}

func (m *Output) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type OutputWithFee struct {
	// The address corresponding to the output.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Types that are valid to be assigned to Fees:
	//	*OutputWithFee_ConfTarget
	//	*OutputWithFee_FeeRateSatPerKw
	Fees                 isOutputWithFee_Fees `protobuf_oneof:"fees"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OutputWithFee) Reset()         { *m = OutputWithFee{} }
func (m *OutputWithFee) String() string { return proto.CompactTextString(m) }
func (*OutputWithFee) ProtoMessage()    {}
func (*OutputWithFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{6}
}

func (m *OutputWithFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputWithFee.Unmarshal(m, b)
}
func (m *OutputWithFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputWithFee.Marshal(b, m, deterministic)
}
func (m *OutputWithFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputWithFee.Merge(m, src)
}
func (m *OutputWithFee) XXX_Size() int {
	return xxx_messageInfo_OutputWithFee.Size(m)
}
func (m *OutputWithFee) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputWithFee.DiscardUnknown(m)
}

var xxx_messageInfo_OutputWithFee proto.InternalMessageInfo

func (m *OutputWithFee) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type isOutputWithFee_Fees interface {
	isOutputWithFee_Fees()
}

type OutputWithFee_ConfTarget struct {
	ConfTarget uint32 `protobuf:"varint,2,opt,name=conf_target,json=confTarget,proto3,oneof"`
}

type OutputWithFee_FeeRateSatPerKw struct {
	FeeRateSatPerKw uint64 `protobuf:"varint,3,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3,oneof"`
}

func (*OutputWithFee_ConfTarget) isOutputWithFee_Fees() {}

func (*OutputWithFee_FeeRateSatPerKw) isOutputWithFee_Fees() {}

func (m *OutputWithFee) GetFees() isOutputWithFee_Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *OutputWithFee) GetConfTarget() uint32 {
	if x, ok := m.GetFees().(*OutputWithFee_ConfTarget); ok {
		return x.ConfTarget
	}
	return 0
}

func (m *OutputWithFee) GetFeeRateSatPerKw() uint64 {
	if x, ok := m.GetFees().(*OutputWithFee_FeeRateSatPerKw); ok {
		return x.FeeRateSatPerKw
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OutputWithFee) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OutputWithFee_ConfTarget)(nil),
		(*OutputWithFee_FeeRateSatPerKw)(nil),
	}
}

type OutputsWithImplicitFee struct {
	Outputs              []*Output `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OutputsWithImplicitFee) Reset()         { *m = OutputsWithImplicitFee{} }
func (m *OutputsWithImplicitFee) String() string { return proto.CompactTextString(m) }
func (*OutputsWithImplicitFee) ProtoMessage()    {}
func (*OutputsWithImplicitFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{7}
}

func (m *OutputsWithImplicitFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputsWithImplicitFee.Unmarshal(m, b)
}
func (m *OutputsWithImplicitFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputsWithImplicitFee.Marshal(b, m, deterministic)
}
func (m *OutputsWithImplicitFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputsWithImplicitFee.Merge(m, src)
}
func (m *OutputsWithImplicitFee) XXX_Size() int {
	return xxx_messageInfo_OutputsWithImplicitFee.Size(m)
}
func (m *OutputsWithImplicitFee) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputsWithImplicitFee.DiscardUnknown(m)
}

var xxx_messageInfo_OutputsWithImplicitFee proto.InternalMessageInfo

func (m *OutputsWithImplicitFee) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type CloseAccountRequest struct {
	// The trader key associated with the account that will be closed.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// Types that are valid to be assigned to FundsDestination:
	//	*CloseAccountRequest_OutputWithFee
	//	*CloseAccountRequest_Outputs
	FundsDestination     isCloseAccountRequest_FundsDestination `protobuf_oneof:"funds_destination"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CloseAccountRequest) Reset()         { *m = CloseAccountRequest{} }
func (m *CloseAccountRequest) String() string { return proto.CompactTextString(m) }
func (*CloseAccountRequest) ProtoMessage()    {}
func (*CloseAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{8}
}

func (m *CloseAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseAccountRequest.Unmarshal(m, b)
}
func (m *CloseAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseAccountRequest.Marshal(b, m, deterministic)
}
func (m *CloseAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseAccountRequest.Merge(m, src)
}
func (m *CloseAccountRequest) XXX_Size() int {
	return xxx_messageInfo_CloseAccountRequest.Size(m)
}
func (m *CloseAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseAccountRequest proto.InternalMessageInfo

func (m *CloseAccountRequest) GetTraderKey() []byte {
	if m != nil {
		return m.TraderKey
	}
	return nil
}

type isCloseAccountRequest_FundsDestination interface {
	isCloseAccountRequest_FundsDestination()
}

type CloseAccountRequest_OutputWithFee struct {
	OutputWithFee *OutputWithFee `protobuf:"bytes,2,opt,name=output_with_fee,json=outputWithFee,proto3,oneof"`
}

type CloseAccountRequest_Outputs struct {
	Outputs *OutputsWithImplicitFee `protobuf:"bytes,3,opt,name=outputs,proto3,oneof"`
}

func (*CloseAccountRequest_OutputWithFee) isCloseAccountRequest_FundsDestination() {}

func (*CloseAccountRequest_Outputs) isCloseAccountRequest_FundsDestination() {}

func (m *CloseAccountRequest) GetFundsDestination() isCloseAccountRequest_FundsDestination {
	if m != nil {
		return m.FundsDestination
	}
	return nil
}

func (m *CloseAccountRequest) GetOutputWithFee() *OutputWithFee {
	if x, ok := m.GetFundsDestination().(*CloseAccountRequest_OutputWithFee); ok {
		return x.OutputWithFee
	}
	return nil
}

func (m *CloseAccountRequest) GetOutputs() *OutputsWithImplicitFee {
	if x, ok := m.GetFundsDestination().(*CloseAccountRequest_Outputs); ok {
		return x.Outputs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CloseAccountRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CloseAccountRequest_OutputWithFee)(nil),
		(*CloseAccountRequest_Outputs)(nil),
	}
}

type CloseAccountResponse struct {
	// The hash of the closing transaction.
	CloseTxid            []byte   `protobuf:"bytes,1,opt,name=close_txid,json=closeTxid,proto3" json:"close_txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseAccountResponse) Reset()         { *m = CloseAccountResponse{} }
func (m *CloseAccountResponse) String() string { return proto.CompactTextString(m) }
func (*CloseAccountResponse) ProtoMessage()    {}
func (*CloseAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{9}
}

func (m *CloseAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseAccountResponse.Unmarshal(m, b)
}
func (m *CloseAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseAccountResponse.Marshal(b, m, deterministic)
}
func (m *CloseAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseAccountResponse.Merge(m, src)
}
func (m *CloseAccountResponse) XXX_Size() int {
	return xxx_messageInfo_CloseAccountResponse.Size(m)
}
func (m *CloseAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseAccountResponse proto.InternalMessageInfo

func (m *CloseAccountResponse) GetCloseTxid() []byte {
	if m != nil {
		return m.CloseTxid
	}
	return nil
}

type WithdrawAccountRequest struct {
	//
	//The trader key associated with the account that funds will be withdrawed
	//from.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// The outputs we'll withdraw funds from the account into.
	Outputs []*Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	//
	//The fee rate, in satoshis per kw, to use for the withdrawal transaction.
	FeeRateSatPerKw      uint64   `protobuf:"varint,3,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawAccountRequest) Reset()         { *m = WithdrawAccountRequest{} }
func (m *WithdrawAccountRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawAccountRequest) ProtoMessage()    {}
func (*WithdrawAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{10}
}

func (m *WithdrawAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawAccountRequest.Unmarshal(m, b)
}
func (m *WithdrawAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawAccountRequest.Marshal(b, m, deterministic)
}
func (m *WithdrawAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawAccountRequest.Merge(m, src)
}
func (m *WithdrawAccountRequest) XXX_Size() int {
	return xxx_messageInfo_WithdrawAccountRequest.Size(m)
}
func (m *WithdrawAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawAccountRequest proto.InternalMessageInfo

func (m *WithdrawAccountRequest) GetTraderKey() []byte {
	if m != nil {
		return m.TraderKey
	}
	return nil
}

func (m *WithdrawAccountRequest) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *WithdrawAccountRequest) GetFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.FeeRateSatPerKw
	}
	return 0
}

type WithdrawAccountResponse struct {
	// The state of the account after processing the withdrawal.
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The transaction used to withdraw funds from the account.
	WithdrawTxid         []byte   `protobuf:"bytes,2,opt,name=withdraw_txid,json=withdrawTxid,proto3" json:"withdraw_txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawAccountResponse) Reset()         { *m = WithdrawAccountResponse{} }
func (m *WithdrawAccountResponse) String() string { return proto.CompactTextString(m) }
func (*WithdrawAccountResponse) ProtoMessage()    {}
func (*WithdrawAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{11}
}

func (m *WithdrawAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawAccountResponse.Unmarshal(m, b)
}
func (m *WithdrawAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawAccountResponse.Marshal(b, m, deterministic)
}
func (m *WithdrawAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawAccountResponse.Merge(m, src)
}
func (m *WithdrawAccountResponse) XXX_Size() int {
	return xxx_messageInfo_WithdrawAccountResponse.Size(m)
}
func (m *WithdrawAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawAccountResponse proto.InternalMessageInfo

func (m *WithdrawAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *WithdrawAccountResponse) GetWithdrawTxid() []byte {
	if m != nil {
		return m.WithdrawTxid
	}
	return nil
}

type DepositAccountRequest struct {
	//
	//The trader key associated with the account that funds will be deposited
	//into.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// The amount in satoshis to deposit into the account.
	AmountSat uint64 `protobuf:"varint,2,opt,name=amount_sat,json=amountSat,proto3" json:"amount_sat,omitempty"`
	//
	//The fee rate, in satoshis per kw, to use for the deposit transaction.
	FeeRateSatPerKw      uint64   `protobuf:"varint,3,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositAccountRequest) Reset()         { *m = DepositAccountRequest{} }
func (m *DepositAccountRequest) String() string { return proto.CompactTextString(m) }
func (*DepositAccountRequest) ProtoMessage()    {}
func (*DepositAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{12}
}

func (m *DepositAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositAccountRequest.Unmarshal(m, b)
}
func (m *DepositAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositAccountRequest.Marshal(b, m, deterministic)
}
func (m *DepositAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAccountRequest.Merge(m, src)
}
func (m *DepositAccountRequest) XXX_Size() int {
	return xxx_messageInfo_DepositAccountRequest.Size(m)
}
func (m *DepositAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAccountRequest proto.InternalMessageInfo

func (m *DepositAccountRequest) GetTraderKey() []byte {
	if m != nil {
		return m.TraderKey
	}
	return nil
}

func (m *DepositAccountRequest) GetAmountSat() uint64 {
	if m != nil {
		return m.AmountSat
	}
	return 0
}

func (m *DepositAccountRequest) GetFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.FeeRateSatPerKw
	}
	return 0
}

type DepositAccountResponse struct {
	// The state of the account after processing the deposit.
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The transaction used to deposit funds into the account.
	DepositTxid          []byte   `protobuf:"bytes,2,opt,name=deposit_txid,json=depositTxid,proto3" json:"deposit_txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositAccountResponse) Reset()         { *m = DepositAccountResponse{} }
func (m *DepositAccountResponse) String() string { return proto.CompactTextString(m) }
func (*DepositAccountResponse) ProtoMessage()    {}
func (*DepositAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{13}
}

func (m *DepositAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositAccountResponse.Unmarshal(m, b)
}
func (m *DepositAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositAccountResponse.Marshal(b, m, deterministic)
}
func (m *DepositAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAccountResponse.Merge(m, src)
}
func (m *DepositAccountResponse) XXX_Size() int {
	return xxx_messageInfo_DepositAccountResponse.Size(m)
}
func (m *DepositAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAccountResponse proto.InternalMessageInfo

func (m *DepositAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *DepositAccountResponse) GetDepositTxid() []byte {
	if m != nil {
		return m.DepositTxid
	}
	return nil
}

type RenewAccountRequest struct {
	// The key associated with the account to renew.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	// Types that are valid to be assigned to AccountExpiry:
	//	*RenewAccountRequest_AbsoluteExpiry
	//	*RenewAccountRequest_RelativeExpiry
	AccountExpiry isRenewAccountRequest_AccountExpiry `protobuf_oneof:"account_expiry"`
	// The fee rate, in satoshis per kw, to use for the renewal transaction.
	FeeRateSatPerKw      uint64   `protobuf:"varint,4,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewAccountRequest) Reset()         { *m = RenewAccountRequest{} }
func (m *RenewAccountRequest) String() string { return proto.CompactTextString(m) }
func (*RenewAccountRequest) ProtoMessage()    {}
func (*RenewAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{14}
}

func (m *RenewAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewAccountRequest.Unmarshal(m, b)
}
func (m *RenewAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewAccountRequest.Marshal(b, m, deterministic)
}
func (m *RenewAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewAccountRequest.Merge(m, src)
}
func (m *RenewAccountRequest) XXX_Size() int {
	return xxx_messageInfo_RenewAccountRequest.Size(m)
}
func (m *RenewAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewAccountRequest proto.InternalMessageInfo

func (m *RenewAccountRequest) GetAccountKey() []byte {
	if m != nil {
		return m.AccountKey
	}
	return nil
}

type isRenewAccountRequest_AccountExpiry interface {
	isRenewAccountRequest_AccountExpiry()
}

type RenewAccountRequest_AbsoluteExpiry struct {
	AbsoluteExpiry uint32 `protobuf:"varint,2,opt,name=absolute_expiry,json=absoluteExpiry,proto3,oneof"`
}

type RenewAccountRequest_RelativeExpiry struct {
	RelativeExpiry uint32 `protobuf:"varint,3,opt,name=relative_expiry,json=relativeExpiry,proto3,oneof"`
}

func (*RenewAccountRequest_AbsoluteExpiry) isRenewAccountRequest_AccountExpiry() {}

func (*RenewAccountRequest_RelativeExpiry) isRenewAccountRequest_AccountExpiry() {}

func (m *RenewAccountRequest) GetAccountExpiry() isRenewAccountRequest_AccountExpiry {
	if m != nil {
		return m.AccountExpiry
	}
	return nil
}

func (m *RenewAccountRequest) GetAbsoluteExpiry() uint32 {
	if x, ok := m.GetAccountExpiry().(*RenewAccountRequest_AbsoluteExpiry); ok {
		return x.AbsoluteExpiry
	}
	return 0
}

func (m *RenewAccountRequest) GetRelativeExpiry() uint32 {
	if x, ok := m.GetAccountExpiry().(*RenewAccountRequest_RelativeExpiry); ok {
		return x.RelativeExpiry
	}
	return 0
}

func (m *RenewAccountRequest) GetFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.FeeRateSatPerKw
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RenewAccountRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RenewAccountRequest_AbsoluteExpiry)(nil),
		(*RenewAccountRequest_RelativeExpiry)(nil),
	}
}

type RenewAccountResponse struct {
	// The state of the account after processing the renewal.
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The transaction used to renew the expiration of the account.
	RenewalTxid          []byte   `protobuf:"bytes,2,opt,name=renewal_txid,json=renewalTxid,proto3" json:"renewal_txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewAccountResponse) Reset()         { *m = RenewAccountResponse{} }
func (m *RenewAccountResponse) String() string { return proto.CompactTextString(m) }
func (*RenewAccountResponse) ProtoMessage()    {}
func (*RenewAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{15}
}

func (m *RenewAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewAccountResponse.Unmarshal(m, b)
}
func (m *RenewAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewAccountResponse.Marshal(b, m, deterministic)
}
func (m *RenewAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewAccountResponse.Merge(m, src)
}
func (m *RenewAccountResponse) XXX_Size() int {
	return xxx_messageInfo_RenewAccountResponse.Size(m)
}
func (m *RenewAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenewAccountResponse proto.InternalMessageInfo

func (m *RenewAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *RenewAccountResponse) GetRenewalTxid() []byte {
	if m != nil {
		return m.RenewalTxid
	}
	return nil
}

type BumpAccountFeeRequest struct {
	//
	//The trader key associated with the account that will have its fee bumped.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The new fee rate, in satoshis per kw, to use for the child of the account
	//transaction.
	FeeRateSatPerKw      uint64   `protobuf:"varint,2,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BumpAccountFeeRequest) Reset()         { *m = BumpAccountFeeRequest{} }
func (m *BumpAccountFeeRequest) String() string { return proto.CompactTextString(m) }
func (*BumpAccountFeeRequest) ProtoMessage()    {}
func (*BumpAccountFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{16}
}

func (m *BumpAccountFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BumpAccountFeeRequest.Unmarshal(m, b)
}
func (m *BumpAccountFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BumpAccountFeeRequest.Marshal(b, m, deterministic)
}
func (m *BumpAccountFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpAccountFeeRequest.Merge(m, src)
}
func (m *BumpAccountFeeRequest) XXX_Size() int {
	return xxx_messageInfo_BumpAccountFeeRequest.Size(m)
}
func (m *BumpAccountFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpAccountFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BumpAccountFeeRequest proto.InternalMessageInfo

func (m *BumpAccountFeeRequest) GetTraderKey() []byte {
	if m != nil {
		return m.TraderKey
	}
	return nil
}

func (m *BumpAccountFeeRequest) GetFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.FeeRateSatPerKw
	}
	return 0
}

type BumpAccountFeeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BumpAccountFeeResponse) Reset()         { *m = BumpAccountFeeResponse{} }
func (m *BumpAccountFeeResponse) String() string { return proto.CompactTextString(m) }
func (*BumpAccountFeeResponse) ProtoMessage()    {}
func (*BumpAccountFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{17}
}

func (m *BumpAccountFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BumpAccountFeeResponse.Unmarshal(m, b)
}
func (m *BumpAccountFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BumpAccountFeeResponse.Marshal(b, m, deterministic)
}
func (m *BumpAccountFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpAccountFeeResponse.Merge(m, src)
}
func (m *BumpAccountFeeResponse) XXX_Size() int {
	return xxx_messageInfo_BumpAccountFeeResponse.Size(m)
}
func (m *BumpAccountFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpAccountFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BumpAccountFeeResponse proto.InternalMessageInfo

type Account struct {
	//
	//The identifying component of an account. This is the key used for the trader
	//in the 2-of-2 multi-sig construction of an account with an auctioneer.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The current outpoint associated with the account. This will change every
	//time the account has been updated.
	Outpoint *auctioneerrpc.OutPoint `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The current total amount of satoshis in the account.
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	//
	//The amount of satoshis in the account that is available, meaning not
	//allocated to any oustanding orders.
	AvailableBalance uint64 `protobuf:"varint,4,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	// The height at which the account will expire.
	ExpirationHeight uint32 `protobuf:"varint,5,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	// The current state of the account.
	State AccountState `protobuf:"varint,6,opt,name=state,proto3,enum=poolrpc.AccountState" json:"state,omitempty"`
	// The hash of the account's latest transaction.
	LatestTxid           []byte   `protobuf:"bytes,7,opt,name=latest_txid,json=latestTxid,proto3" json:"latest_txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{18}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetTraderKey() []byte {
	if m != nil {
		return m.TraderKey
	}
	return nil
}

func (m *Account) GetOutpoint() *auctioneerrpc.OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (m *Account) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Account) GetAvailableBalance() uint64 {
	if m != nil {
		return m.AvailableBalance
	}
	return 0
}

func (m *Account) GetExpirationHeight() uint32 {
	if m != nil {
		return m.ExpirationHeight
	}
	return 0
}

func (m *Account) GetState() AccountState {
	if m != nil {
		return m.State
	}
	return AccountState_PENDING_OPEN
}

func (m *Account) GetLatestTxid() []byte {
	if m != nil {
		return m.LatestTxid
	}
	return nil
}

type SubmitOrderRequest struct {
	// Types that are valid to be assigned to Details:
	//	*SubmitOrderRequest_Ask
	//	*SubmitOrderRequest_Bid
	Details isSubmitOrderRequest_Details `protobuf_oneof:"details"`
	//
	//An optional identification string that will be appended to the user agent
	//string sent to the server to give information about the usage of pool. This
	//initiator part is meant for user interfaces to add their name to give the
	//full picture of the binary used (poold, LiT) and the method used for
	//submitting the order (pool CLI, LiT UI, other 3rd party UI).
	Initiator            string   `protobuf:"bytes,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitOrderRequest) Reset()         { *m = SubmitOrderRequest{} }
func (m *SubmitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitOrderRequest) ProtoMessage()    {}
func (*SubmitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{19}
}

func (m *SubmitOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitOrderRequest.Unmarshal(m, b)
}
func (m *SubmitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitOrderRequest.Marshal(b, m, deterministic)
}
func (m *SubmitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitOrderRequest.Merge(m, src)
}
func (m *SubmitOrderRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitOrderRequest.Size(m)
}
func (m *SubmitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitOrderRequest proto.InternalMessageInfo

type isSubmitOrderRequest_Details interface {
	isSubmitOrderRequest_Details()
}

type SubmitOrderRequest_Ask struct {
	Ask *Ask `protobuf:"bytes,1,opt,name=ask,proto3,oneof"`
}

type SubmitOrderRequest_Bid struct {
	Bid *Bid `protobuf:"bytes,2,opt,name=bid,proto3,oneof"`
}

func (*SubmitOrderRequest_Ask) isSubmitOrderRequest_Details() {}

func (*SubmitOrderRequest_Bid) isSubmitOrderRequest_Details() {}

func (m *SubmitOrderRequest) GetDetails() isSubmitOrderRequest_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *SubmitOrderRequest) GetAsk() *Ask {
	if x, ok := m.GetDetails().(*SubmitOrderRequest_Ask); ok {
		return x.Ask
	}
	return nil
}

func (m *SubmitOrderRequest) GetBid() *Bid {
	if x, ok := m.GetDetails().(*SubmitOrderRequest_Bid); ok {
		return x.Bid
	}
	return nil
}

func (m *SubmitOrderRequest) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubmitOrderRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubmitOrderRequest_Ask)(nil),
		(*SubmitOrderRequest_Bid)(nil),
	}
}

type SubmitOrderResponse struct {
	// Types that are valid to be assigned to Details:
	//	*SubmitOrderResponse_InvalidOrder
	//	*SubmitOrderResponse_AcceptedOrderNonce
	Details              isSubmitOrderResponse_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SubmitOrderResponse) Reset()         { *m = SubmitOrderResponse{} }
func (m *SubmitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitOrderResponse) ProtoMessage()    {}
func (*SubmitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{20}
}

func (m *SubmitOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitOrderResponse.Unmarshal(m, b)
}
func (m *SubmitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitOrderResponse.Marshal(b, m, deterministic)
}
func (m *SubmitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitOrderResponse.Merge(m, src)
}
func (m *SubmitOrderResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitOrderResponse.Size(m)
}
func (m *SubmitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitOrderResponse proto.InternalMessageInfo

type isSubmitOrderResponse_Details interface {
	isSubmitOrderResponse_Details()
}

type SubmitOrderResponse_InvalidOrder struct {
	InvalidOrder *auctioneerrpc.InvalidOrder `protobuf:"bytes,1,opt,name=invalid_order,json=invalidOrder,proto3,oneof"`
}

type SubmitOrderResponse_AcceptedOrderNonce struct {
	AcceptedOrderNonce []byte `protobuf:"bytes,2,opt,name=accepted_order_nonce,json=acceptedOrderNonce,proto3,oneof"`
}

func (*SubmitOrderResponse_InvalidOrder) isSubmitOrderResponse_Details() {}

func (*SubmitOrderResponse_AcceptedOrderNonce) isSubmitOrderResponse_Details() {}

func (m *SubmitOrderResponse) GetDetails() isSubmitOrderResponse_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *SubmitOrderResponse) GetInvalidOrder() *auctioneerrpc.InvalidOrder {
	if x, ok := m.GetDetails().(*SubmitOrderResponse_InvalidOrder); ok {
		return x.InvalidOrder
	}
	return nil
}

func (m *SubmitOrderResponse) GetAcceptedOrderNonce() []byte {
	if x, ok := m.GetDetails().(*SubmitOrderResponse_AcceptedOrderNonce); ok {
		return x.AcceptedOrderNonce
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubmitOrderResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubmitOrderResponse_InvalidOrder)(nil),
		(*SubmitOrderResponse_AcceptedOrderNonce)(nil),
	}
}

type ListOrdersRequest struct {
	//
	//Can be set to true to list the orders including all events, which can be
	//very verbose.
	Verbose bool `protobuf:"varint,1,opt,name=verbose,proto3" json:"verbose,omitempty"`
	//
	//Only list orders that are still active.
	ActiveOnly           bool     `protobuf:"varint,2,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrdersRequest) Reset()         { *m = ListOrdersRequest{} }
func (m *ListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListOrdersRequest) ProtoMessage()    {}
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{21}
}

func (m *ListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersRequest.Unmarshal(m, b)
}
func (m *ListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersRequest.Marshal(b, m, deterministic)
}
func (m *ListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersRequest.Merge(m, src)
}
func (m *ListOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_ListOrdersRequest.Size(m)
}
func (m *ListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersRequest proto.InternalMessageInfo

func (m *ListOrdersRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *ListOrdersRequest) GetActiveOnly() bool {
	if m != nil {
		return m.ActiveOnly
	}
	return false
}

type ListOrdersResponse struct {
	Asks                 []*Ask   `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids                 []*Bid   `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrdersResponse) Reset()         { *m = ListOrdersResponse{} }
func (m *ListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrdersResponse) ProtoMessage()    {}
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{22}
}

func (m *ListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersResponse.Unmarshal(m, b)
}
func (m *ListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersResponse.Marshal(b, m, deterministic)
}
func (m *ListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersResponse.Merge(m, src)
}
func (m *ListOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_ListOrdersResponse.Size(m)
}
func (m *ListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersResponse proto.InternalMessageInfo

func (m *ListOrdersResponse) GetAsks() []*Ask {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *ListOrdersResponse) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

type CancelOrderRequest struct {
	OrderNonce           []byte   `protobuf:"bytes,1,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelOrderRequest) Reset()         { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()    {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{23}
}

func (m *CancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelOrderRequest.Unmarshal(m, b)
}
func (m *CancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelOrderRequest.Marshal(b, m, deterministic)
}
func (m *CancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderRequest.Merge(m, src)
}
func (m *CancelOrderRequest) XXX_Size() int {
	return xxx_messageInfo_CancelOrderRequest.Size(m)
}
func (m *CancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderRequest proto.InternalMessageInfo

func (m *CancelOrderRequest) GetOrderNonce() []byte {
	if m != nil {
		return m.OrderNonce
	}
	return nil
}

type CancelOrderResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelOrderResponse) Reset()         { *m = CancelOrderResponse{} }
func (m *CancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*CancelOrderResponse) ProtoMessage()    {}
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{24}
}

func (m *CancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelOrderResponse.Unmarshal(m, b)
}
func (m *CancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelOrderResponse.Marshal(b, m, deterministic)
}
func (m *CancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderResponse.Merge(m, src)
}
func (m *CancelOrderResponse) XXX_Size() int {
	return xxx_messageInfo_CancelOrderResponse.Size(m)
}
func (m *CancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderResponse proto.InternalMessageInfo

type Order struct {
	//
	//The trader's account key of the account that is used for the order.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//Fixed order rate in parts per billion.
	RateFixed uint32 `protobuf:"varint,2,opt,name=rate_fixed,json=rateFixed,proto3" json:"rate_fixed,omitempty"`
	//
	//Order amount in satoshis.
	Amt uint64 `protobuf:"varint,3,opt,name=amt,proto3" json:"amt,omitempty"`
	//
	//Maximum fee rate the trader is willing to pay for the batch transaction,
	//expressed in satoshis per 1000 weight units (sat/KW).
	MaxBatchFeeRateSatPerKw uint64 `protobuf:"varint,4,opt,name=max_batch_fee_rate_sat_per_kw,json=maxBatchFeeRateSatPerKw,proto3" json:"max_batch_fee_rate_sat_per_kw,omitempty"`
	//
	//Order nonce, acts as unique order identifier.
	OrderNonce []byte `protobuf:"bytes,5,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	//
	//The state the order currently is in.
	State auctioneerrpc.OrderState `protobuf:"varint,6,opt,name=state,proto3,enum=poolrpc.OrderState" json:"state,omitempty"`
	//
	//The number of order units the amount corresponds to.
	Units uint32 `protobuf:"varint,7,opt,name=units,proto3" json:"units,omitempty"`
	//
	//The number of currently unfilled units of this order. This will be equal to
	//the total amount of units until the order has reached the state PARTIAL_FILL
	//or EXECUTED.
	UnitsUnfulfilled uint32 `protobuf:"varint,8,opt,name=units_unfulfilled,json=unitsUnfulfilled,proto3" json:"units_unfulfilled,omitempty"`
	// The value reserved from the account by this order to ensure the account
	// can pay execution and chain fees in case it gets matched.
	ReservedValueSat uint64 `protobuf:"varint,9,opt,name=reserved_value_sat,json=reservedValueSat,proto3" json:"reserved_value_sat,omitempty"`
	// The unix timestamp in nanoseconds the order was first created/submitted.
	CreationTimestampNs uint64 `protobuf:"varint,10,opt,name=creation_timestamp_ns,json=creationTimestampNs,proto3" json:"creation_timestamp_ns,omitempty"`
	//
	//A list of events that were emitted for this order. This field is only set
	//when the verbose flag is set to true in the request.
	Events []*OrderEvent `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty"`
	// The minimum number of order units that must be matched per order pair.
	MinUnitsMatch        uint32   `protobuf:"varint,12,opt,name=min_units_match,json=minUnitsMatch,proto3" json:"min_units_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{25}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetTraderKey() []byte {
	if m != nil {
		return m.TraderKey
	}
	return nil
}

func (m *Order) GetRateFixed() uint32 {
	if m != nil {
		return m.RateFixed
	}
	return 0
}

func (m *Order) GetAmt() uint64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *Order) GetMaxBatchFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.MaxBatchFeeRateSatPerKw
	}
	return 0
}

func (m *Order) GetOrderNonce() []byte {
	if m != nil {
		return m.OrderNonce
	}
	return nil
}

func (m *Order) GetState() auctioneerrpc.OrderState {
	if m != nil {
		return m.State
	}
	return auctioneerrpc.OrderState_ORDER_SUBMITTED
}

func (m *Order) GetUnits() uint32 {
	if m != nil {
		return m.Units
	}
	return 0
}

func (m *Order) GetUnitsUnfulfilled() uint32 {
	if m != nil {
		return m.UnitsUnfulfilled
	}
	return 0
}

func (m *Order) GetReservedValueSat() uint64 {
	if m != nil {
		return m.ReservedValueSat
	}
	return 0
}

func (m *Order) GetCreationTimestampNs() uint64 {
	if m != nil {
		return m.CreationTimestampNs
	}
	return 0
}

func (m *Order) GetEvents() []*OrderEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Order) GetMinUnitsMatch() uint32 {
	if m != nil {
		return m.MinUnitsMatch
	}
	return 0
}

type Bid struct {
	//
	//The common fields shared between both ask and bid order types.
	Details *Order `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//Required number of blocks that a channel opened as a result of this bid
	//should be kept open.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	//
	//The minimum node tier this order should be matched with. Only asks backed by
	//a node this tier or higher will be eligible for matching with this bid.
	MinNodeTier auctioneerrpc.NodeTier `protobuf:"varint,4,opt,name=min_node_tier,json=minNodeTier,proto3,enum=poolrpc.NodeTier" json:"min_node_tier,omitempty"`
	//
	//Give the incoming channel that results from this bid being matched an
	//initial outbound balance by adding additional funds from the taker's account
	//into the channel. As a simplification for the execution protocol and the
	//channel reserve calculations, the self_chan_balance can be at most the same
	//as the order amount and the min_chan_amt must be set to the full order
	//amount.
	SelfChanBalance uint64 `protobuf:"varint,5,opt,name=self_chan_balance,json=selfChanBalance,proto3" json:"self_chan_balance,omitempty"`
	//
	//If this bid order is meant to lease a channel for another node (which is
	//dubbed a "sidecar channel") then this ticket contains all information
	//required for setting up that sidecar channel. The ticket is expected to be
	//the base64 encoded ticket, including the prefix and the checksum.
	SidecarTicket        string   `protobuf:"bytes,6,opt,name=sidecar_ticket,json=sidecarTicket,proto3" json:"sidecar_ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{26}
}

func (m *Bid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bid.Unmarshal(m, b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return xxx_messageInfo_Bid.Size(m)
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetDetails() *Order {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Bid) GetLeaseDurationBlocks() uint32 {
	if m != nil {
		return m.LeaseDurationBlocks
	}
	return 0
}

func (m *Bid) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Bid) GetMinNodeTier() auctioneerrpc.NodeTier {
	if m != nil {
		return m.MinNodeTier
	}
	return auctioneerrpc.NodeTier_TIER_DEFAULT
}

func (m *Bid) GetSelfChanBalance() uint64 {
	if m != nil {
		return m.SelfChanBalance
	}
	return 0
}

func (m *Bid) GetSidecarTicket() string {
	if m != nil {
		return m.SidecarTicket
	}
	return ""
}

type Ask struct {
	//
	//The common fields shared between both ask and bid order types.
	Details *Order `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//The number of blocks the liquidity provider is willing to provide the
	//channel funds for.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version              uint32   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ask) Reset()         { *m = Ask{} }
func (m *Ask) String() string { return proto.CompactTextString(m) }
func (*Ask) ProtoMessage()    {}
func (*Ask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{27}
}

func (m *Ask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ask.Unmarshal(m, b)
}
func (m *Ask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ask.Marshal(b, m, deterministic)
}
func (m *Ask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ask.Merge(m, src)
}
func (m *Ask) XXX_Size() int {
	return xxx_messageInfo_Ask.Size(m)
}
func (m *Ask) XXX_DiscardUnknown() {
	xxx_messageInfo_Ask.DiscardUnknown(m)
}

var xxx_messageInfo_Ask proto.InternalMessageInfo

func (m *Ask) GetDetails() *Order {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Ask) GetLeaseDurationBlocks() uint32 {
	if m != nil {
		return m.LeaseDurationBlocks
	}
	return 0
}

func (m *Ask) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type QuoteOrderRequest struct {
	//
	//Order amount in satoshis.
	Amt uint64 `protobuf:"varint,1,opt,name=amt,proto3" json:"amt,omitempty"`
	//
	//Fixed order rate in parts per billion.
	RateFixed uint32 `protobuf:"varint,2,opt,name=rate_fixed,json=rateFixed,proto3" json:"rate_fixed,omitempty"`
	//
	//Required number of blocks that a channel opened as a result of this bid
	//should be kept open.
	LeaseDurationBlocks uint32 `protobuf:"varint,3,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//Maximum fee rate the trader is willing to pay for the batch transaction,
	//expressed in satoshis per 1000 weight units (sat/KW).
	MaxBatchFeeRateSatPerKw uint64 `protobuf:"varint,4,opt,name=max_batch_fee_rate_sat_per_kw,json=maxBatchFeeRateSatPerKw,proto3" json:"max_batch_fee_rate_sat_per_kw,omitempty"`
	// The minimum number of order units that must be matched per order pair.
	MinUnitsMatch        uint32   `protobuf:"varint,5,opt,name=min_units_match,json=minUnitsMatch,proto3" json:"min_units_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteOrderRequest) Reset()         { *m = QuoteOrderRequest{} }
func (m *QuoteOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QuoteOrderRequest) ProtoMessage()    {}
func (*QuoteOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{28}
}

func (m *QuoteOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteOrderRequest.Unmarshal(m, b)
}
func (m *QuoteOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteOrderRequest.Marshal(b, m, deterministic)
}
func (m *QuoteOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteOrderRequest.Merge(m, src)
}
func (m *QuoteOrderRequest) XXX_Size() int {
	return xxx_messageInfo_QuoteOrderRequest.Size(m)
}
func (m *QuoteOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteOrderRequest proto.InternalMessageInfo

func (m *QuoteOrderRequest) GetAmt() uint64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *QuoteOrderRequest) GetRateFixed() uint32 {
	if m != nil {
		return m.RateFixed
	}
	return 0
}

func (m *QuoteOrderRequest) GetLeaseDurationBlocks() uint32 {
	if m != nil {
		return m.LeaseDurationBlocks
	}
	return 0
}

func (m *QuoteOrderRequest) GetMaxBatchFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.MaxBatchFeeRateSatPerKw
	}
	return 0
}

func (m *QuoteOrderRequest) GetMinUnitsMatch() uint32 {
	if m != nil {
		return m.MinUnitsMatch
	}
	return 0
}

type QuoteOrderResponse struct {
	//
	//The total order premium in satoshis for filling the entire order. This
	//represents the interest amount paid to the maker by the taker excluding any
	//execution or chain fees.
	TotalPremiumSat uint64 `protobuf:"varint,1,opt,name=total_premium_sat,json=totalPremiumSat,proto3" json:"total_premium_sat,omitempty"`
	//
	//The fixed order rate expressed as a fraction instead of parts per billion.
	RatePerBlock float64 `protobuf:"fixed64,2,opt,name=rate_per_block,json=ratePerBlock,proto3" json:"rate_per_block,omitempty"`
	//
	//The fixed order rate expressed as a percentage instead of parts per billion.
	RatePercent float64 `protobuf:"fixed64,3,opt,name=rate_percent,json=ratePercent,proto3" json:"rate_percent,omitempty"`
	//
	//The total execution fee in satoshis that needs to be paid to the auctioneer
	//for executing the entire order.
	TotalExecutionFeeSat uint64 `protobuf:"varint,4,opt,name=total_execution_fee_sat,json=totalExecutionFeeSat,proto3" json:"total_execution_fee_sat,omitempty"`
	//
	//The worst case chain fees that need to be paid if fee rates spike up to the
	//max_batch_fee_rate_sat_per_kw value specified in the request. This value is
	//highly dependent on the min_units_match parameter as well since the
	//calculation assumes chain fees for the chain footprint of opening
	//amt/min_units_match channels (hence worst case calculation).
	WorstCaseChainFeeSat uint64   `protobuf:"varint,5,opt,name=worst_case_chain_fee_sat,json=worstCaseChainFeeSat,proto3" json:"worst_case_chain_fee_sat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteOrderResponse) Reset()         { *m = QuoteOrderResponse{} }
func (m *QuoteOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QuoteOrderResponse) ProtoMessage()    {}
func (*QuoteOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{29}
}

func (m *QuoteOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteOrderResponse.Unmarshal(m, b)
}
func (m *QuoteOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteOrderResponse.Marshal(b, m, deterministic)
}
func (m *QuoteOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteOrderResponse.Merge(m, src)
}
func (m *QuoteOrderResponse) XXX_Size() int {
	return xxx_messageInfo_QuoteOrderResponse.Size(m)
}
func (m *QuoteOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteOrderResponse proto.InternalMessageInfo

func (m *QuoteOrderResponse) GetTotalPremiumSat() uint64 {
	if m != nil {
		return m.TotalPremiumSat
	}
	return 0
}

func (m *QuoteOrderResponse) GetRatePerBlock() float64 {
	if m != nil {
		return m.RatePerBlock
	}
	return 0
}

func (m *QuoteOrderResponse) GetRatePercent() float64 {
	if m != nil {
		return m.RatePercent
	}
	return 0
}

func (m *QuoteOrderResponse) GetTotalExecutionFeeSat() uint64 {
	if m != nil {
		return m.TotalExecutionFeeSat
	}
	return 0
}

func (m *QuoteOrderResponse) GetWorstCaseChainFeeSat() uint64 {
	if m != nil {
		return m.WorstCaseChainFeeSat
	}
	return 0
}

type OrderEvent struct {
	//
	//The unix timestamp in nanoseconds the event was emitted at. This is the
	//primary key of the event and is unique across the database.
	TimestampNs int64 `protobuf:"varint,1,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// The human readable representation of the event.
	EventStr string `protobuf:"bytes,2,opt,name=event_str,json=eventStr,proto3" json:"event_str,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*OrderEvent_StateChange
	//	*OrderEvent_Matched
	Event                isOrderEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OrderEvent) Reset()         { *m = OrderEvent{} }
func (m *OrderEvent) String() string { return proto.CompactTextString(m) }
func (*OrderEvent) ProtoMessage()    {}
func (*OrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{30}
}

func (m *OrderEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderEvent.Unmarshal(m, b)
}
func (m *OrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderEvent.Marshal(b, m, deterministic)
}
func (m *OrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderEvent.Merge(m, src)
}
func (m *OrderEvent) XXX_Size() int {
	return xxx_messageInfo_OrderEvent.Size(m)
}
func (m *OrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OrderEvent proto.InternalMessageInfo

func (m *OrderEvent) GetTimestampNs() int64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *OrderEvent) GetEventStr() string {
	if m != nil {
		return m.EventStr
	}
	return ""
}

type isOrderEvent_Event interface {
	isOrderEvent_Event()
}

type OrderEvent_StateChange struct {
	StateChange *UpdatedEvent `protobuf:"bytes,3,opt,name=state_change,json=stateChange,proto3,oneof"`
}

type OrderEvent_Matched struct {
	Matched *MatchEvent `protobuf:"bytes,4,opt,name=matched,proto3,oneof"`
}

func (*OrderEvent_StateChange) isOrderEvent_Event() {}

func (*OrderEvent_Matched) isOrderEvent_Event() {}

func (m *OrderEvent) GetEvent() isOrderEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *OrderEvent) GetStateChange() *UpdatedEvent {
	if x, ok := m.GetEvent().(*OrderEvent_StateChange); ok {
		return x.StateChange
	}
	return nil
}

func (m *OrderEvent) GetMatched() *MatchEvent {
	if x, ok := m.GetEvent().(*OrderEvent_Matched); ok {
		return x.Matched
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OrderEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OrderEvent_StateChange)(nil),
		(*OrderEvent_Matched)(nil),
	}
}

type UpdatedEvent struct {
	//
	//The state of the order previous to the change. This is what the state
	//changed from.
	PreviousState auctioneerrpc.OrderState `protobuf:"varint,1,opt,name=previous_state,json=previousState,proto3,enum=poolrpc.OrderState" json:"previous_state,omitempty"`
	//
	//The new state of the order after the change. This is what the state changed
	//to.
	NewState auctioneerrpc.OrderState `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=poolrpc.OrderState" json:"new_state,omitempty"`
	// The units that were filled at the time of the event.
	UnitsFilled          uint32   `protobuf:"varint,3,opt,name=units_filled,json=unitsFilled,proto3" json:"units_filled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatedEvent) Reset()         { *m = UpdatedEvent{} }
func (m *UpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*UpdatedEvent) ProtoMessage()    {}
func (*UpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{31}
}

func (m *UpdatedEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatedEvent.Unmarshal(m, b)
}
func (m *UpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatedEvent.Marshal(b, m, deterministic)
}
func (m *UpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedEvent.Merge(m, src)
}
func (m *UpdatedEvent) XXX_Size() int {
	return xxx_messageInfo_UpdatedEvent.Size(m)
}
func (m *UpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedEvent proto.InternalMessageInfo

func (m *UpdatedEvent) GetPreviousState() auctioneerrpc.OrderState {
	if m != nil {
		return m.PreviousState
	}
	return auctioneerrpc.OrderState_ORDER_SUBMITTED
}

func (m *UpdatedEvent) GetNewState() auctioneerrpc.OrderState {
	if m != nil {
		return m.NewState
	}
	return auctioneerrpc.OrderState_ORDER_SUBMITTED
}

func (m *UpdatedEvent) GetUnitsFilled() uint32 {
	if m != nil {
		return m.UnitsFilled
	}
	return 0
}

type MatchEvent struct {
	// The state of the match making process the order went through.
	MatchState MatchState `protobuf:"varint,1,opt,name=match_state,json=matchState,proto3,enum=poolrpc.MatchState" json:"match_state,omitempty"`
	// The number of units that would be (or were) filled with this match.
	UnitsFilled uint32 `protobuf:"varint,2,opt,name=units_filled,json=unitsFilled,proto3" json:"units_filled,omitempty"`
	// The nonce of the order we were matched to.
	MatchedOrder []byte `protobuf:"bytes,3,opt,name=matched_order,json=matchedOrder,proto3" json:"matched_order,omitempty"`
	//
	//The reason why the trader daemon rejected the order. Is only set if
	//match_state is set to REJECTED.
	RejectReason         MatchRejectReason `protobuf:"varint,4,opt,name=reject_reason,json=rejectReason,proto3,enum=poolrpc.MatchRejectReason" json:"reject_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MatchEvent) Reset()         { *m = MatchEvent{} }
func (m *MatchEvent) String() string { return proto.CompactTextString(m) }
func (*MatchEvent) ProtoMessage()    {}
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{32}
}

func (m *MatchEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchEvent.Unmarshal(m, b)
}
func (m *MatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchEvent.Marshal(b, m, deterministic)
}
func (m *MatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchEvent.Merge(m, src)
}
func (m *MatchEvent) XXX_Size() int {
	return xxx_messageInfo_MatchEvent.Size(m)
}
func (m *MatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MatchEvent proto.InternalMessageInfo

func (m *MatchEvent) GetMatchState() MatchState {
	if m != nil {
		return m.MatchState
	}
	return MatchState_PREPARE
}

func (m *MatchEvent) GetUnitsFilled() uint32 {
	if m != nil {
		return m.UnitsFilled
	}
	return 0
}

func (m *MatchEvent) GetMatchedOrder() []byte {
	if m != nil {
		return m.MatchedOrder
	}
	return nil
}

func (m *MatchEvent) GetRejectReason() MatchRejectReason {
	if m != nil {
		return m.RejectReason
	}
	return MatchRejectReason_NONE
}

type RecoverAccountsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoverAccountsRequest) Reset()         { *m = RecoverAccountsRequest{} }
func (m *RecoverAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*RecoverAccountsRequest) ProtoMessage()    {}
func (*RecoverAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{33}
}

func (m *RecoverAccountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverAccountsRequest.Unmarshal(m, b)
}
func (m *RecoverAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverAccountsRequest.Marshal(b, m, deterministic)
}
func (m *RecoverAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverAccountsRequest.Merge(m, src)
}
func (m *RecoverAccountsRequest) XXX_Size() int {
	return xxx_messageInfo_RecoverAccountsRequest.Size(m)
}
func (m *RecoverAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverAccountsRequest proto.InternalMessageInfo

type RecoverAccountsResponse struct {
	// The number of accounts that were recovered.
	NumRecoveredAccounts uint32   `protobuf:"varint,1,opt,name=num_recovered_accounts,json=numRecoveredAccounts,proto3" json:"num_recovered_accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoverAccountsResponse) Reset()         { *m = RecoverAccountsResponse{} }
func (m *RecoverAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*RecoverAccountsResponse) ProtoMessage()    {}
func (*RecoverAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{34}
}

func (m *RecoverAccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverAccountsResponse.Unmarshal(m, b)
}
func (m *RecoverAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverAccountsResponse.Marshal(b, m, deterministic)
}
func (m *RecoverAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverAccountsResponse.Merge(m, src)
}
func (m *RecoverAccountsResponse) XXX_Size() int {
	return xxx_messageInfo_RecoverAccountsResponse.Size(m)
}
func (m *RecoverAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverAccountsResponse proto.InternalMessageInfo

func (m *RecoverAccountsResponse) GetNumRecoveredAccounts() uint32 {
	if m != nil {
		return m.NumRecoveredAccounts
	}
	return 0
}

type AuctionFeeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionFeeRequest) Reset()         { *m = AuctionFeeRequest{} }
func (m *AuctionFeeRequest) String() string { return proto.CompactTextString(m) }
func (*AuctionFeeRequest) ProtoMessage()    {}
func (*AuctionFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{35}
}

func (m *AuctionFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionFeeRequest.Unmarshal(m, b)
}
func (m *AuctionFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionFeeRequest.Marshal(b, m, deterministic)
}
func (m *AuctionFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionFeeRequest.Merge(m, src)
}
func (m *AuctionFeeRequest) XXX_Size() int {
	return xxx_messageInfo_AuctionFeeRequest.Size(m)
}
func (m *AuctionFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionFeeRequest proto.InternalMessageInfo

type AuctionFeeResponse struct {
	//
	//The execution fee charged per matched order.
	ExecutionFee         *auctioneerrpc.ExecutionFee `protobuf:"bytes,1,opt,name=execution_fee,json=executionFee,proto3" json:"execution_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AuctionFeeResponse) Reset()         { *m = AuctionFeeResponse{} }
func (m *AuctionFeeResponse) String() string { return proto.CompactTextString(m) }
func (*AuctionFeeResponse) ProtoMessage()    {}
func (*AuctionFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{36}
}

func (m *AuctionFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionFeeResponse.Unmarshal(m, b)
}
func (m *AuctionFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionFeeResponse.Marshal(b, m, deterministic)
}
func (m *AuctionFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionFeeResponse.Merge(m, src)
}
func (m *AuctionFeeResponse) XXX_Size() int {
	return xxx_messageInfo_AuctionFeeResponse.Size(m)
}
func (m *AuctionFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionFeeResponse proto.InternalMessageInfo

func (m *AuctionFeeResponse) GetExecutionFee() *auctioneerrpc.ExecutionFee {
	if m != nil {
		return m.ExecutionFee
	}
	return nil
}

type Lease struct {
	// The outpoint of the channel created.
	ChannelPoint *auctioneerrpc.OutPoint `protobuf:"bytes,1,opt,name=channel_point,json=channelPoint,proto3" json:"channel_point,omitempty"`
	// The amount, in satoshis, of the channel created.
	ChannelAmtSat uint64 `protobuf:"varint,2,opt,name=channel_amt_sat,json=channelAmtSat,proto3" json:"channel_amt_sat,omitempty"`
	// The intended duration, in blocks, of the channel created.
	ChannelDurationBlocks uint32 `protobuf:"varint,3,opt,name=channel_duration_blocks,json=channelDurationBlocks,proto3" json:"channel_duration_blocks,omitempty"`
	// The absolute height that this channel lease expires.
	ChannelLeaseExpiry uint32 `protobuf:"varint,4,opt,name=channel_lease_expiry,json=channelLeaseExpiry,proto3" json:"channel_lease_expiry,omitempty"`
	//
	//The premium, in satoshis, either paid or received for the offered liquidity.
	PremiumSat uint64 `protobuf:"varint,5,opt,name=premium_sat,json=premiumSat,proto3" json:"premium_sat,omitempty"`
	//
	//The execution fee, in satoshis, charged by the auctioneer for the channel
	//created.
	ExecutionFeeSat uint64 `protobuf:"varint,6,opt,name=execution_fee_sat,json=executionFeeSat,proto3" json:"execution_fee_sat,omitempty"`
	//
	//The fee, in satoshis, charged by the auctioneer for the batch execution
	//transaction that created this lease.
	ChainFeeSat uint64 `protobuf:"varint,7,opt,name=chain_fee_sat,json=chainFeeSat,proto3" json:"chain_fee_sat,omitempty"`
	//
	//The actual fixed rate expressed in parts per billionth this lease was
	//bought/sold at.
	ClearingRatePrice uint64 `protobuf:"varint,8,opt,name=clearing_rate_price,json=clearingRatePrice,proto3" json:"clearing_rate_price,omitempty"`
	//
	//The actual fixed rate of the bid/ask, this should always be 'better' than
	//the clearing_rate_price.
	OrderFixedRate uint64 `protobuf:"varint,9,opt,name=order_fixed_rate,json=orderFixedRate,proto3" json:"order_fixed_rate,omitempty"`
	// The order executed that resulted in the channel created.
	OrderNonce []byte `protobuf:"bytes,10,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	// Whether this channel was purchased from another trader or not.
	Purchased bool `protobuf:"varint,11,opt,name=purchased,proto3" json:"purchased,omitempty"`
	// The pubkey of the node that this channel was bought/sold from.
	ChannelRemoteNodeKey []byte `protobuf:"bytes,12,opt,name=channel_remote_node_key,json=channelRemoteNodeKey,proto3" json:"channel_remote_node_key,omitempty"`
	// The tier of the node that this channel was bought/sold from.
	ChannelNodeTier auctioneerrpc.NodeTier `protobuf:"varint,13,opt,name=channel_node_tier,json=channelNodeTier,proto3,enum=poolrpc.NodeTier" json:"channel_node_tier,omitempty"`
	// The self channel balance that was pushed to the recipient.
	SelfChanBalance uint64 `protobuf:"varint,14,opt,name=self_chan_balance,json=selfChanBalance,proto3" json:"self_chan_balance,omitempty"`
	// Whether the channel was leased as a sidecar channel (bid orders only).
	SidecarChannel       bool     `protobuf:"varint,15,opt,name=sidecar_channel,json=sidecarChannel,proto3" json:"sidecar_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{37}
}

func (m *Lease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lease.Unmarshal(m, b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return xxx_messageInfo_Lease.Size(m)
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetChannelPoint() *auctioneerrpc.OutPoint {
	if m != nil {
		return m.ChannelPoint
	}
	return nil
}

func (m *Lease) GetChannelAmtSat() uint64 {
	if m != nil {
		return m.ChannelAmtSat
	}
	return 0
}

func (m *Lease) GetChannelDurationBlocks() uint32 {
	if m != nil {
		return m.ChannelDurationBlocks
	}
	return 0
}

func (m *Lease) GetChannelLeaseExpiry() uint32 {
	if m != nil {
		return m.ChannelLeaseExpiry
	}
	return 0
}

func (m *Lease) GetPremiumSat() uint64 {
	if m != nil {
		return m.PremiumSat
	}
	return 0
}

func (m *Lease) GetExecutionFeeSat() uint64 {
	if m != nil {
		return m.ExecutionFeeSat
	}
	return 0
}

func (m *Lease) GetChainFeeSat() uint64 {
	if m != nil {
		return m.ChainFeeSat
	}
	return 0
}

func (m *Lease) GetClearingRatePrice() uint64 {
	if m != nil {
		return m.ClearingRatePrice
	}
	return 0
}

func (m *Lease) GetOrderFixedRate() uint64 {
	if m != nil {
		return m.OrderFixedRate
	}
	return 0
}

func (m *Lease) GetOrderNonce() []byte {
	if m != nil {
		return m.OrderNonce
	}
	return nil
}

func (m *Lease) GetPurchased() bool {
	if m != nil {
		return m.Purchased
	}
	return false
}

func (m *Lease) GetChannelRemoteNodeKey() []byte {
	if m != nil {
		return m.ChannelRemoteNodeKey
	}
	return nil
}

func (m *Lease) GetChannelNodeTier() auctioneerrpc.NodeTier {
	if m != nil {
		return m.ChannelNodeTier
	}
	return auctioneerrpc.NodeTier_TIER_DEFAULT
}

func (m *Lease) GetSelfChanBalance() uint64 {
	if m != nil {
		return m.SelfChanBalance
	}
	return 0
}

func (m *Lease) GetSidecarChannel() bool {
	if m != nil {
		return m.SidecarChannel
	}
	return false
}

type LeasesRequest struct {
	//
	//An optional list of batches to retrieve the leases of. If empty, leases
	//throughout all batches are returned.
	BatchIds [][]byte `protobuf:"bytes,1,rep,name=batch_ids,json=batchIds,proto3" json:"batch_ids,omitempty"`
	//
	//An optional list of accounts to retrieve the leases of. If empty, leases
	//for all accounts are returned.
	Accounts             [][]byte `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeasesRequest) Reset()         { *m = LeasesRequest{} }
func (m *LeasesRequest) String() string { return proto.CompactTextString(m) }
func (*LeasesRequest) ProtoMessage()    {}
func (*LeasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{38}
}

func (m *LeasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeasesRequest.Unmarshal(m, b)
}
func (m *LeasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeasesRequest.Marshal(b, m, deterministic)
}
func (m *LeasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeasesRequest.Merge(m, src)
}
func (m *LeasesRequest) XXX_Size() int {
	return xxx_messageInfo_LeasesRequest.Size(m)
}
func (m *LeasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeasesRequest proto.InternalMessageInfo

func (m *LeasesRequest) GetBatchIds() [][]byte {
	if m != nil {
		return m.BatchIds
	}
	return nil
}

func (m *LeasesRequest) GetAccounts() [][]byte {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type LeasesResponse struct {
	// The relevant list of leases purchased or sold within the auction.
	Leases []*Lease `protobuf:"bytes,1,rep,name=leases,proto3" json:"leases,omitempty"`
	// The total amount of satoshis earned from the leases returned.
	TotalAmtEarnedSat uint64 `protobuf:"varint,2,opt,name=total_amt_earned_sat,json=totalAmtEarnedSat,proto3" json:"total_amt_earned_sat,omitempty"`
	// The total amount of satoshis paid for the leases returned.
	TotalAmtPaidSat      uint64   `protobuf:"varint,3,opt,name=total_amt_paid_sat,json=totalAmtPaidSat,proto3" json:"total_amt_paid_sat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeasesResponse) Reset()         { *m = LeasesResponse{} }
func (m *LeasesResponse) String() string { return proto.CompactTextString(m) }
func (*LeasesResponse) ProtoMessage()    {}
func (*LeasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{39}
}

func (m *LeasesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeasesResponse.Unmarshal(m, b)
}
func (m *LeasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeasesResponse.Marshal(b, m, deterministic)
}
func (m *LeasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeasesResponse.Merge(m, src)
}
func (m *LeasesResponse) XXX_Size() int {
	return xxx_messageInfo_LeasesResponse.Size(m)
}
func (m *LeasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeasesResponse proto.InternalMessageInfo

func (m *LeasesResponse) GetLeases() []*Lease {
	if m != nil {
		return m.Leases
	}
	return nil
}

func (m *LeasesResponse) GetTotalAmtEarnedSat() uint64 {
	if m != nil {
		return m.TotalAmtEarnedSat
	}
	return 0
}

func (m *LeasesResponse) GetTotalAmtPaidSat() uint64 {
	if m != nil {
		return m.TotalAmtPaidSat
	}
	return 0
}

type TokensRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokensRequest) Reset()         { *m = TokensRequest{} }
func (m *TokensRequest) String() string { return proto.CompactTextString(m) }
func (*TokensRequest) ProtoMessage()    {}
func (*TokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{40}
}

func (m *TokensRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokensRequest.Unmarshal(m, b)
}
func (m *TokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokensRequest.Marshal(b, m, deterministic)
}
func (m *TokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokensRequest.Merge(m, src)
}
func (m *TokensRequest) XXX_Size() int {
	return xxx_messageInfo_TokensRequest.Size(m)
}
func (m *TokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokensRequest proto.InternalMessageInfo

type TokensResponse struct {
	//*
	//List of all tokens the daemon knows of, including old/expired tokens.
	Tokens               []*LsatToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TokensResponse) Reset()         { *m = TokensResponse{} }
func (m *TokensResponse) String() string { return proto.CompactTextString(m) }
func (*TokensResponse) ProtoMessage()    {}
func (*TokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{41}
}

func (m *TokensResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokensResponse.Unmarshal(m, b)
}
func (m *TokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokensResponse.Marshal(b, m, deterministic)
}
func (m *TokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokensResponse.Merge(m, src)
}
func (m *TokensResponse) XXX_Size() int {
	return xxx_messageInfo_TokensResponse.Size(m)
}
func (m *TokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokensResponse proto.InternalMessageInfo

func (m *TokensResponse) GetTokens() []*LsatToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type LsatToken struct {
	//*
	//The base macaroon that was baked by the auth server.
	BaseMacaroon []byte `protobuf:"bytes,1,opt,name=base_macaroon,json=baseMacaroon,proto3" json:"base_macaroon,omitempty"`
	//*
	//The payment hash of the payment that was paid to obtain the token.
	PaymentHash []byte `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	//*
	//The preimage of the payment hash, knowledge of this is proof that the
	//payment has been paid. If the preimage is set to all zeros, this means the
	//payment is still pending and the token is not yet fully valid.
	PaymentPreimage []byte `protobuf:"bytes,3,opt,name=payment_preimage,json=paymentPreimage,proto3" json:"payment_preimage,omitempty"`
	//*
	//The amount of millisatoshis that was paid to get the token.
	AmountPaidMsat int64 `protobuf:"varint,4,opt,name=amount_paid_msat,json=amountPaidMsat,proto3" json:"amount_paid_msat,omitempty"`
	//*
	//The amount of millisatoshis paid in routing fee to pay for the token.
	RoutingFeePaidMsat int64 `protobuf:"varint,5,opt,name=routing_fee_paid_msat,json=routingFeePaidMsat,proto3" json:"routing_fee_paid_msat,omitempty"`
	//*
	//The creation time of the token as UNIX timestamp in seconds.
	TimeCreated int64 `protobuf:"varint,6,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	//*
	//Indicates whether the token is expired or still valid.
	Expired bool `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
	//*
	//Identifying attribute of this token in the store. Currently represents the
	//file name of the token where it's stored on the file system.
	StorageName          string   `protobuf:"bytes,8,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LsatToken) Reset()         { *m = LsatToken{} }
func (m *LsatToken) String() string { return proto.CompactTextString(m) }
func (*LsatToken) ProtoMessage()    {}
func (*LsatToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{42}
}

func (m *LsatToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LsatToken.Unmarshal(m, b)
}
func (m *LsatToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LsatToken.Marshal(b, m, deterministic)
}
func (m *LsatToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LsatToken.Merge(m, src)
}
func (m *LsatToken) XXX_Size() int {
	return xxx_messageInfo_LsatToken.Size(m)
}
func (m *LsatToken) XXX_DiscardUnknown() {
	xxx_messageInfo_LsatToken.DiscardUnknown(m)
}

var xxx_messageInfo_LsatToken proto.InternalMessageInfo

func (m *LsatToken) GetBaseMacaroon() []byte {
	if m != nil {
		return m.BaseMacaroon
	}
	return nil
}

func (m *LsatToken) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *LsatToken) GetPaymentPreimage() []byte {
	if m != nil {
		return m.PaymentPreimage
	}
	return nil
}

func (m *LsatToken) GetAmountPaidMsat() int64 {
	if m != nil {
		return m.AmountPaidMsat
	}
	return 0
}

func (m *LsatToken) GetRoutingFeePaidMsat() int64 {
	if m != nil {
		return m.RoutingFeePaidMsat
	}
	return 0
}

func (m *LsatToken) GetTimeCreated() int64 {
	if m != nil {
		return m.TimeCreated
	}
	return 0
}

func (m *LsatToken) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *LsatToken) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

type LeaseDurationRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseDurationRequest) Reset()         { *m = LeaseDurationRequest{} }
func (m *LeaseDurationRequest) String() string { return proto.CompactTextString(m) }
func (*LeaseDurationRequest) ProtoMessage()    {}
func (*LeaseDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{43}
}

func (m *LeaseDurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseDurationRequest.Unmarshal(m, b)
}
func (m *LeaseDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseDurationRequest.Marshal(b, m, deterministic)
}
func (m *LeaseDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseDurationRequest.Merge(m, src)
}
func (m *LeaseDurationRequest) XXX_Size() int {
	return xxx_messageInfo_LeaseDurationRequest.Size(m)
}
func (m *LeaseDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseDurationRequest proto.InternalMessageInfo

type LeaseDurationResponse struct {
	//
	//Deprecated, use lease_duration_buckets.
	LeaseDurations map[uint32]bool `protobuf:"bytes,1,rep,name=lease_durations,json=leaseDurations,proto3" json:"lease_durations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Deprecated: Do not use.
	//
	//The set of lease durations the market is currently accepting and the state
	//the duration buckets currently are in.
	LeaseDurationBuckets map[uint32]auctioneerrpc.DurationBucketState `protobuf:"bytes,2,rep,name=lease_duration_buckets,json=leaseDurationBuckets,proto3" json:"lease_duration_buckets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=poolrpc.DurationBucketState"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *LeaseDurationResponse) Reset()         { *m = LeaseDurationResponse{} }
func (m *LeaseDurationResponse) String() string { return proto.CompactTextString(m) }
func (*LeaseDurationResponse) ProtoMessage()    {}
func (*LeaseDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{44}
}

func (m *LeaseDurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseDurationResponse.Unmarshal(m, b)
}
func (m *LeaseDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseDurationResponse.Marshal(b, m, deterministic)
}
func (m *LeaseDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseDurationResponse.Merge(m, src)
}
func (m *LeaseDurationResponse) XXX_Size() int {
	return xxx_messageInfo_LeaseDurationResponse.Size(m)
}
func (m *LeaseDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseDurationResponse proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *LeaseDurationResponse) GetLeaseDurations() map[uint32]bool {
	if m != nil {
		return m.LeaseDurations
	}
	return nil
}

func (m *LeaseDurationResponse) GetLeaseDurationBuckets() map[uint32]auctioneerrpc.DurationBucketState {
	if m != nil {
		return m.LeaseDurationBuckets
	}
	return nil
}

type NextBatchInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextBatchInfoRequest) Reset()         { *m = NextBatchInfoRequest{} }
func (m *NextBatchInfoRequest) String() string { return proto.CompactTextString(m) }
func (*NextBatchInfoRequest) ProtoMessage()    {}
func (*NextBatchInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{45}
}

func (m *NextBatchInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextBatchInfoRequest.Unmarshal(m, b)
}
func (m *NextBatchInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextBatchInfoRequest.Marshal(b, m, deterministic)
}
func (m *NextBatchInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextBatchInfoRequest.Merge(m, src)
}
func (m *NextBatchInfoRequest) XXX_Size() int {
	return xxx_messageInfo_NextBatchInfoRequest.Size(m)
}
func (m *NextBatchInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextBatchInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextBatchInfoRequest proto.InternalMessageInfo

type NextBatchInfoResponse struct {
	//
	//The confirmation target the auctioneer will use for fee estimation of the
	//next batch.
	ConfTarget uint32 `protobuf:"varint,5,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	//
	//The fee rate, in satoshis per kiloweight, estimated by the auctioneer to use
	//for the next batch.
	FeeRateSatPerKw uint64 `protobuf:"varint,6,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	//
	//The absolute unix timestamp in seconds at which the auctioneer will attempt
	//to clear the next batch.
	ClearTimestamp       uint64   `protobuf:"varint,7,opt,name=clear_timestamp,json=clearTimestamp,proto3" json:"clear_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextBatchInfoResponse) Reset()         { *m = NextBatchInfoResponse{} }
func (m *NextBatchInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NextBatchInfoResponse) ProtoMessage()    {}
func (*NextBatchInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{46}
}

func (m *NextBatchInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextBatchInfoResponse.Unmarshal(m, b)
}
func (m *NextBatchInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextBatchInfoResponse.Marshal(b, m, deterministic)
}
func (m *NextBatchInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextBatchInfoResponse.Merge(m, src)
}
func (m *NextBatchInfoResponse) XXX_Size() int {
	return xxx_messageInfo_NextBatchInfoResponse.Size(m)
}
func (m *NextBatchInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextBatchInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextBatchInfoResponse proto.InternalMessageInfo

func (m *NextBatchInfoResponse) GetConfTarget() uint32 {
	if m != nil {
		return m.ConfTarget
	}
	return 0
}

func (m *NextBatchInfoResponse) GetFeeRateSatPerKw() uint64 {
	if m != nil {
		return m.FeeRateSatPerKw
	}
	return 0
}

func (m *NextBatchInfoResponse) GetClearTimestamp() uint64 {
	if m != nil {
		return m.ClearTimestamp
	}
	return 0
}

type NodeRatingRequest struct {
	// The target node to obtain ratings information for.
	NodePubkeys          [][]byte `protobuf:"bytes,1,rep,name=node_pubkeys,json=nodePubkeys,proto3" json:"node_pubkeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRatingRequest) Reset()         { *m = NodeRatingRequest{} }
func (m *NodeRatingRequest) String() string { return proto.CompactTextString(m) }
func (*NodeRatingRequest) ProtoMessage()    {}
func (*NodeRatingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{47}
}

func (m *NodeRatingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRatingRequest.Unmarshal(m, b)
}
func (m *NodeRatingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRatingRequest.Marshal(b, m, deterministic)
}
func (m *NodeRatingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRatingRequest.Merge(m, src)
}
func (m *NodeRatingRequest) XXX_Size() int {
	return xxx_messageInfo_NodeRatingRequest.Size(m)
}
func (m *NodeRatingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRatingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRatingRequest proto.InternalMessageInfo

func (m *NodeRatingRequest) GetNodePubkeys() [][]byte {
	if m != nil {
		return m.NodePubkeys
	}
	return nil
}

type NodeRatingResponse struct {
	// A series of node ratings for each of the queried nodes.
	NodeRatings          []*auctioneerrpc.NodeRating `protobuf:"bytes,1,rep,name=node_ratings,json=nodeRatings,proto3" json:"node_ratings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NodeRatingResponse) Reset()         { *m = NodeRatingResponse{} }
func (m *NodeRatingResponse) String() string { return proto.CompactTextString(m) }
func (*NodeRatingResponse) ProtoMessage()    {}
func (*NodeRatingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{48}
}

func (m *NodeRatingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRatingResponse.Unmarshal(m, b)
}
func (m *NodeRatingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRatingResponse.Marshal(b, m, deterministic)
}
func (m *NodeRatingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRatingResponse.Merge(m, src)
}
func (m *NodeRatingResponse) XXX_Size() int {
	return xxx_messageInfo_NodeRatingResponse.Size(m)
}
func (m *NodeRatingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRatingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRatingResponse proto.InternalMessageInfo

func (m *NodeRatingResponse) GetNodeRatings() []*auctioneerrpc.NodeRating {
	if m != nil {
		return m.NodeRatings
	}
	return nil
}

type GetInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{49}
}

func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoRequest.Unmarshal(m, b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(m, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetInfoRequest.Size(m)
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

type GetInfoResponse struct {
	// The version of the Pool daemon that is running.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The total number of accounts in the local database.
	AccountsTotal uint32 `protobuf:"varint,2,opt,name=accounts_total,json=accountsTotal,proto3" json:"accounts_total,omitempty"`
	//
	//The total number of accounts that are in an active, non-archived state,
	//including expired accounts.
	AccountsActive uint32 `protobuf:"varint,3,opt,name=accounts_active,json=accountsActive,proto3" json:"accounts_active,omitempty"`
	// The total number of accounts that are active but have expired.
	AccountsActiveExpired uint32 `protobuf:"varint,4,opt,name=accounts_active_expired,json=accountsActiveExpired,proto3" json:"accounts_active_expired,omitempty"`
	// The total number of accounts that are in an archived/closed state.
	AccountsArchived uint32 `protobuf:"varint,5,opt,name=accounts_archived,json=accountsArchived,proto3" json:"accounts_archived,omitempty"`
	// The total number of orders in the local database.
	OrdersTotal uint32 `protobuf:"varint,6,opt,name=orders_total,json=ordersTotal,proto3" json:"orders_total,omitempty"`
	//
	//The total number of active/pending orders that are still waiting for
	//execution.
	OrdersActive uint32 `protobuf:"varint,7,opt,name=orders_active,json=ordersActive,proto3" json:"orders_active,omitempty"`
	// The total number of orders that have been archived.
	OrdersArchived uint32 `protobuf:"varint,8,opt,name=orders_archived,json=ordersArchived,proto3" json:"orders_archived,omitempty"`
	// The current block height as seen by the connected lnd node.
	CurrentBlockHeight uint32 `protobuf:"varint,9,opt,name=current_block_height,json=currentBlockHeight,proto3" json:"current_block_height,omitempty"`
	// The number of batches an account of this node was ever involved in.
	BatchesInvolved uint32 `protobuf:"varint,10,opt,name=batches_involved,json=batchesInvolved,proto3" json:"batches_involved,omitempty"`
	// Our lnd node's rating as judged by the auctioneer server.
	NodeRating *auctioneerrpc.NodeRating `protobuf:"bytes,11,opt,name=node_rating,json=nodeRating,proto3" json:"node_rating,omitempty"`
	// The number of available LSAT tokens.
	LsatTokens uint32 `protobuf:"varint,12,opt,name=lsat_tokens,json=lsatTokens,proto3" json:"lsat_tokens,omitempty"`
	//
	//Indicates whether there is an active subscription connection to the
	//auctioneer. This will never be true if there is no active account. If there
	//are active accounts, this value represents the network connection status to
	//the auctioneer server.
	SubscribedToAuctioneer bool `protobuf:"varint,13,opt,name=subscribed_to_auctioneer,json=subscribedToAuctioneer,proto3" json:"subscribed_to_auctioneer,omitempty"`
	//
	//Indicates whether the global `--newnodesonly` command line flag or
	//`newnodesonly=true` configuration parameter was set on the Pool trader
	//daemon.
	NewNodesOnly bool `protobuf:"varint,14,opt,name=new_nodes_only,json=newNodesOnly,proto3" json:"new_nodes_only,omitempty"`
	//
	//A map of all markets identified by their lease duration and the current
	//set of statistics such as number of open orders and total units of open
	//interest.
	MarketInfo           map[uint32]*auctioneerrpc.MarketInfo `protobuf:"bytes,15,rep,name=market_info,json=marketInfo,proto3" json:"market_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *GetInfoResponse) Reset()         { *m = GetInfoResponse{} }
func (m *GetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfoResponse) ProtoMessage()    {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{50}
}

func (m *GetInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoResponse.Unmarshal(m, b)
}
func (m *GetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoResponse.Merge(m, src)
}
func (m *GetInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetInfoResponse.Size(m)
}
func (m *GetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoResponse proto.InternalMessageInfo

func (m *GetInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetInfoResponse) GetAccountsTotal() uint32 {
	if m != nil {
		return m.AccountsTotal
	}
	return 0
}

func (m *GetInfoResponse) GetAccountsActive() uint32 {
	if m != nil {
		return m.AccountsActive
	}
	return 0
}

func (m *GetInfoResponse) GetAccountsActiveExpired() uint32 {
	if m != nil {
		return m.AccountsActiveExpired
	}
	return 0
}

func (m *GetInfoResponse) GetAccountsArchived() uint32 {
	if m != nil {
		return m.AccountsArchived
	}
	return 0
}

func (m *GetInfoResponse) GetOrdersTotal() uint32 {
	if m != nil {
		return m.OrdersTotal
	}
	return 0
}

func (m *GetInfoResponse) GetOrdersActive() uint32 {
	if m != nil {
		return m.OrdersActive
	}
	return 0
}

func (m *GetInfoResponse) GetOrdersArchived() uint32 {
	if m != nil {
		return m.OrdersArchived
	}
	return 0
}

func (m *GetInfoResponse) GetCurrentBlockHeight() uint32 {
	if m != nil {
		return m.CurrentBlockHeight
	}
	return 0
}

func (m *GetInfoResponse) GetBatchesInvolved() uint32 {
	if m != nil {
		return m.BatchesInvolved
	}
	return 0
}

func (m *GetInfoResponse) GetNodeRating() *auctioneerrpc.NodeRating {
	if m != nil {
		return m.NodeRating
	}
	return nil
}

func (m *GetInfoResponse) GetLsatTokens() uint32 {
	if m != nil {
		return m.LsatTokens
	}
	return 0
}

func (m *GetInfoResponse) GetSubscribedToAuctioneer() bool {
	if m != nil {
		return m.SubscribedToAuctioneer
	}
	return false
}

func (m *GetInfoResponse) GetNewNodesOnly() bool {
	if m != nil {
		return m.NewNodesOnly
	}
	return false
}

func (m *GetInfoResponse) GetMarketInfo() map[uint32]*auctioneerrpc.MarketInfo {
	if m != nil {
		return m.MarketInfo
	}
	return nil
}

type StopDaemonRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopDaemonRequest) Reset()         { *m = StopDaemonRequest{} }
func (m *StopDaemonRequest) String() string { return proto.CompactTextString(m) }
func (*StopDaemonRequest) ProtoMessage()    {}
func (*StopDaemonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{51}
}

func (m *StopDaemonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopDaemonRequest.Unmarshal(m, b)
}
func (m *StopDaemonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopDaemonRequest.Marshal(b, m, deterministic)
}
func (m *StopDaemonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopDaemonRequest.Merge(m, src)
}
func (m *StopDaemonRequest) XXX_Size() int {
	return xxx_messageInfo_StopDaemonRequest.Size(m)
}
func (m *StopDaemonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopDaemonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopDaemonRequest proto.InternalMessageInfo

type StopDaemonResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopDaemonResponse) Reset()         { *m = StopDaemonResponse{} }
func (m *StopDaemonResponse) String() string { return proto.CompactTextString(m) }
func (*StopDaemonResponse) ProtoMessage()    {}
func (*StopDaemonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{52}
}

func (m *StopDaemonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopDaemonResponse.Unmarshal(m, b)
}
func (m *StopDaemonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopDaemonResponse.Marshal(b, m, deterministic)
}
func (m *StopDaemonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopDaemonResponse.Merge(m, src)
}
func (m *StopDaemonResponse) XXX_Size() int {
	return xxx_messageInfo_StopDaemonResponse.Size(m)
}
func (m *StopDaemonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopDaemonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopDaemonResponse proto.InternalMessageInfo

type OfferSidecarRequest struct {
	//
	//If false, then only the trader_key, unit, self_chan_balance, and
	//lease_duration_blocks need to be set in the bid below. Otherwise, the
	//fields as they're set when submitting a bid need to be filled in.
	AutoNegotiate bool `protobuf:"varint,1,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	//
	//The bid template that will be used to populate the initial sidecar ticket
	//as well as auto negotiate the remainig steps of the sidecar channel if
	//needed.
	Bid                  *Bid     `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfferSidecarRequest) Reset()         { *m = OfferSidecarRequest{} }
func (m *OfferSidecarRequest) String() string { return proto.CompactTextString(m) }
func (*OfferSidecarRequest) ProtoMessage()    {}
func (*OfferSidecarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{53}
}

func (m *OfferSidecarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfferSidecarRequest.Unmarshal(m, b)
}
func (m *OfferSidecarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfferSidecarRequest.Marshal(b, m, deterministic)
}
func (m *OfferSidecarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfferSidecarRequest.Merge(m, src)
}
func (m *OfferSidecarRequest) XXX_Size() int {
	return xxx_messageInfo_OfferSidecarRequest.Size(m)
}
func (m *OfferSidecarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OfferSidecarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OfferSidecarRequest proto.InternalMessageInfo

func (m *OfferSidecarRequest) GetAutoNegotiate() bool {
	if m != nil {
		return m.AutoNegotiate
	}
	return false
}

func (m *OfferSidecarRequest) GetBid() *Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

type SidecarTicket struct {
	//
	//The complete sidecar ticket in its string encoded form which is base64 URL
	//encoded, has a human readable prefix ('sidecar...') and a checksum built in.
	//The string encoded version will only be used on the trader side of the API.
	//All requests to the auctioneer expect the ticket to be in its raw, tlv
	//encoded byte form.
	Ticket               string   `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SidecarTicket) Reset()         { *m = SidecarTicket{} }
func (m *SidecarTicket) String() string { return proto.CompactTextString(m) }
func (*SidecarTicket) ProtoMessage()    {}
func (*SidecarTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{54}
}

func (m *SidecarTicket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SidecarTicket.Unmarshal(m, b)
}
func (m *SidecarTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SidecarTicket.Marshal(b, m, deterministic)
}
func (m *SidecarTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarTicket.Merge(m, src)
}
func (m *SidecarTicket) XXX_Size() int {
	return xxx_messageInfo_SidecarTicket.Size(m)
}
func (m *SidecarTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarTicket.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarTicket proto.InternalMessageInfo

func (m *SidecarTicket) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

type RegisterSidecarRequest struct {
	//
	//The sidecar ticket to register and add the node and channel funding
	//information to. The ticket must be in the state "offered".
	Ticket string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	//
	//If this value is True, then the daemon will attempt to finish negotiating
	//the details of the sidecar channel automatically in the background. The
	//progress of the ticket can be monitored using the SidecarState RPC. In
	//addition, if this flag is set, then this method will _block_ until the
	//sidecar negotiation either finishes or breaks down.
	AutoNegotiate        bool     `protobuf:"varint,2,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterSidecarRequest) Reset()         { *m = RegisterSidecarRequest{} }
func (m *RegisterSidecarRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterSidecarRequest) ProtoMessage()    {}
func (*RegisterSidecarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{55}
}

func (m *RegisterSidecarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterSidecarRequest.Unmarshal(m, b)
}
func (m *RegisterSidecarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterSidecarRequest.Marshal(b, m, deterministic)
}
func (m *RegisterSidecarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSidecarRequest.Merge(m, src)
}
func (m *RegisterSidecarRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterSidecarRequest.Size(m)
}
func (m *RegisterSidecarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSidecarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSidecarRequest proto.InternalMessageInfo

func (m *RegisterSidecarRequest) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *RegisterSidecarRequest) GetAutoNegotiate() bool {
	if m != nil {
		return m.AutoNegotiate
	}
	return false
}

type ExpectSidecarChannelRequest struct {
	//
	//The sidecar ticket to expect an incoming channel for. The ticket must be in
	//the state "ordered".
	Ticket               string   `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpectSidecarChannelRequest) Reset()         { *m = ExpectSidecarChannelRequest{} }
func (m *ExpectSidecarChannelRequest) String() string { return proto.CompactTextString(m) }
func (*ExpectSidecarChannelRequest) ProtoMessage()    {}
func (*ExpectSidecarChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{56}
}

func (m *ExpectSidecarChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectSidecarChannelRequest.Unmarshal(m, b)
}
func (m *ExpectSidecarChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectSidecarChannelRequest.Marshal(b, m, deterministic)
}
func (m *ExpectSidecarChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectSidecarChannelRequest.Merge(m, src)
}
func (m *ExpectSidecarChannelRequest) XXX_Size() int {
	return xxx_messageInfo_ExpectSidecarChannelRequest.Size(m)
}
func (m *ExpectSidecarChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectSidecarChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectSidecarChannelRequest proto.InternalMessageInfo

func (m *ExpectSidecarChannelRequest) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

type ExpectSidecarChannelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpectSidecarChannelResponse) Reset()         { *m = ExpectSidecarChannelResponse{} }
func (m *ExpectSidecarChannelResponse) String() string { return proto.CompactTextString(m) }
func (*ExpectSidecarChannelResponse) ProtoMessage()    {}
func (*ExpectSidecarChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f61804588c75fe, []int{57}
}

func (m *ExpectSidecarChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectSidecarChannelResponse.Unmarshal(m, b)
}
func (m *ExpectSidecarChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectSidecarChannelResponse.Marshal(b, m, deterministic)
}
func (m *ExpectSidecarChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectSidecarChannelResponse.Merge(m, src)
}
func (m *ExpectSidecarChannelResponse) XXX_Size() int {
	return xxx_messageInfo_ExpectSidecarChannelResponse.Size(m)
}
func (m *ExpectSidecarChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectSidecarChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectSidecarChannelResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("poolrpc.AccountState", AccountState_name, AccountState_value)
	proto.RegisterEnum("poolrpc.MatchState", MatchState_name, MatchState_value)
	proto.RegisterEnum("poolrpc.MatchRejectReason", MatchRejectReason_name, MatchRejectReason_value)
	proto.RegisterType((*InitAccountRequest)(nil), "poolrpc.InitAccountRequest")
	proto.RegisterType((*QuoteAccountRequest)(nil), "poolrpc.QuoteAccountRequest")
	proto.RegisterType((*QuoteAccountResponse)(nil), "poolrpc.QuoteAccountResponse")
	proto.RegisterType((*ListAccountsRequest)(nil), "poolrpc.ListAccountsRequest")
	proto.RegisterType((*ListAccountsResponse)(nil), "poolrpc.ListAccountsResponse")
	proto.RegisterType((*Output)(nil), "poolrpc.Output")
	proto.RegisterType((*OutputWithFee)(nil), "poolrpc.OutputWithFee")
	proto.RegisterType((*OutputsWithImplicitFee)(nil), "poolrpc.OutputsWithImplicitFee")
	proto.RegisterType((*CloseAccountRequest)(nil), "poolrpc.CloseAccountRequest")
	proto.RegisterType((*CloseAccountResponse)(nil), "poolrpc.CloseAccountResponse")
	proto.RegisterType((*WithdrawAccountRequest)(nil), "poolrpc.WithdrawAccountRequest")
	proto.RegisterType((*WithdrawAccountResponse)(nil), "poolrpc.WithdrawAccountResponse")
	proto.RegisterType((*DepositAccountRequest)(nil), "poolrpc.DepositAccountRequest")
	proto.RegisterType((*DepositAccountResponse)(nil), "poolrpc.DepositAccountResponse")
	proto.RegisterType((*RenewAccountRequest)(nil), "poolrpc.RenewAccountRequest")
	proto.RegisterType((*RenewAccountResponse)(nil), "poolrpc.RenewAccountResponse")
	proto.RegisterType((*BumpAccountFeeRequest)(nil), "poolrpc.BumpAccountFeeRequest")
	proto.RegisterType((*BumpAccountFeeResponse)(nil), "poolrpc.BumpAccountFeeResponse")
	proto.RegisterType((*Account)(nil), "poolrpc.Account")
	proto.RegisterType((*SubmitOrderRequest)(nil), "poolrpc.SubmitOrderRequest")
	proto.RegisterType((*SubmitOrderResponse)(nil), "poolrpc.SubmitOrderResponse")
	proto.RegisterType((*ListOrdersRequest)(nil), "poolrpc.ListOrdersRequest")
	proto.RegisterType((*ListOrdersResponse)(nil), "poolrpc.ListOrdersResponse")
	proto.RegisterType((*CancelOrderRequest)(nil), "poolrpc.CancelOrderRequest")
	proto.RegisterType((*CancelOrderResponse)(nil), "poolrpc.CancelOrderResponse")
	proto.RegisterType((*Order)(nil), "poolrpc.Order")
	proto.RegisterType((*Bid)(nil), "poolrpc.Bid")
	proto.RegisterType((*Ask)(nil), "poolrpc.Ask")
	proto.RegisterType((*QuoteOrderRequest)(nil), "poolrpc.QuoteOrderRequest")
	proto.RegisterType((*QuoteOrderResponse)(nil), "poolrpc.QuoteOrderResponse")
	proto.RegisterType((*OrderEvent)(nil), "poolrpc.OrderEvent")
	proto.RegisterType((*UpdatedEvent)(nil), "poolrpc.UpdatedEvent")
	proto.RegisterType((*MatchEvent)(nil), "poolrpc.MatchEvent")
	proto.RegisterType((*RecoverAccountsRequest)(nil), "poolrpc.RecoverAccountsRequest")
	proto.RegisterType((*RecoverAccountsResponse)(nil), "poolrpc.RecoverAccountsResponse")
	proto.RegisterType((*AuctionFeeRequest)(nil), "poolrpc.AuctionFeeRequest")
	proto.RegisterType((*AuctionFeeResponse)(nil), "poolrpc.AuctionFeeResponse")
	proto.RegisterType((*Lease)(nil), "poolrpc.Lease")
	proto.RegisterType((*LeasesRequest)(nil), "poolrpc.LeasesRequest")
	proto.RegisterType((*LeasesResponse)(nil), "poolrpc.LeasesResponse")
	proto.RegisterType((*TokensRequest)(nil), "poolrpc.TokensRequest")
	proto.RegisterType((*TokensResponse)(nil), "poolrpc.TokensResponse")
	proto.RegisterType((*LsatToken)(nil), "poolrpc.LsatToken")
	proto.RegisterType((*LeaseDurationRequest)(nil), "poolrpc.LeaseDurationRequest")
	proto.RegisterType((*LeaseDurationResponse)(nil), "poolrpc.LeaseDurationResponse")
	proto.RegisterMapType((map[uint32]auctioneerrpc.DurationBucketState)(nil), "poolrpc.LeaseDurationResponse.LeaseDurationBucketsEntry")
	proto.RegisterMapType((map[uint32]bool)(nil), "poolrpc.LeaseDurationResponse.LeaseDurationsEntry")
	proto.RegisterType((*NextBatchInfoRequest)(nil), "poolrpc.NextBatchInfoRequest")
	proto.RegisterType((*NextBatchInfoResponse)(nil), "poolrpc.NextBatchInfoResponse")
	proto.RegisterType((*NodeRatingRequest)(nil), "poolrpc.NodeRatingRequest")
	proto.RegisterType((*NodeRatingResponse)(nil), "poolrpc.NodeRatingResponse")
	proto.RegisterType((*GetInfoRequest)(nil), "poolrpc.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "poolrpc.GetInfoResponse")
	proto.RegisterMapType((map[uint32]*auctioneerrpc.MarketInfo)(nil), "poolrpc.GetInfoResponse.MarketInfoEntry")
	proto.RegisterType((*StopDaemonRequest)(nil), "poolrpc.StopDaemonRequest")
	proto.RegisterType((*StopDaemonResponse)(nil), "poolrpc.StopDaemonResponse")
	proto.RegisterType((*OfferSidecarRequest)(nil), "poolrpc.OfferSidecarRequest")
	proto.RegisterType((*SidecarTicket)(nil), "poolrpc.SidecarTicket")
	proto.RegisterType((*RegisterSidecarRequest)(nil), "poolrpc.RegisterSidecarRequest")
	proto.RegisterType((*ExpectSidecarChannelRequest)(nil), "poolrpc.ExpectSidecarChannelRequest")
	proto.RegisterType((*ExpectSidecarChannelResponse)(nil), "poolrpc.ExpectSidecarChannelResponse")
}

func init() { proto.RegisterFile("trader.proto", fileDescriptor_b8f61804588c75fe) }

var fileDescriptor_b8f61804588c75fe = []byte{
	// 3728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3a, 0x4d, 0x73, 0x23, 0x49,
	0x56, 0x2e, 0xc9, 0x5f, 0x7a, 0xfa, 0x74, 0xca, 0x76, 0x6b, 0xd4, 0xdf, 0xb5, 0xdb, 0x3b, 0xdd,
	0x3d, 0x43, 0xf7, 0x62, 0xb6, 0x9b, 0x61, 0x18, 0xd8, 0x95, 0x65, 0x79, 0xac, 0x1d, 0xb7, 0xac,
	0x49, 0xbb, 0x7b, 0x97, 0x0d, 0x22, 0x2a, 0x52, 0xa5, 0xb4, 0x5d, 0x6b, 0xa9, 0x4a, 0x54, 0xa5,
	0x6c, 0xf7, 0x81, 0x03, 0xc1, 0x46, 0x70, 0x84, 0x58, 0x02, 0xae, 0xdc, 0xf8, 0x11, 0x10, 0xc1,
	0x81, 0x13, 0x11, 0xf0, 0x17, 0x88, 0xe0, 0xcc, 0x2f, 0xe0, 0x48, 0xe4, 0x57, 0x55, 0x56, 0xa9,
	0x34, 0x3d, 0x33, 0x1c, 0xb8, 0xa9, 0xde, 0x47, 0xe6, 0x7b, 0x2f, 0xdf, 0x7b, 0xf9, 0xde, 0x4b,
	0x41, 0x85, 0x85, 0x64, 0x4c, 0xc3, 0x17, 0xb3, 0x30, 0x60, 0x01, 0xda, 0x98, 0x05, 0xc1, 0x24,
	0x9c, 0xb9, 0xed, 0x07, 0x64, 0xee, 0x32, 0x2f, 0xf0, 0x29, 0x0d, 0xc3, 0x99, 0xfb, 0x32, 0xf9,
	0x92, 0x84, 0xf6, 0x7f, 0x5b, 0x80, 0xfa, 0xbe, 0xc7, 0x3a, 0xae, 0x1b, 0xcc, 0x7d, 0x86, 0xe9,
	0x9f, 0xcd, 0x69, 0xc4, 0xd0, 0x0f, 0xa0, 0x4a, 0x24, 0xc4, 0xb9, 0x26, 0x93, 0x39, 0x6d, 0x59,
	0x8f, 0xac, 0xa7, 0xab, 0xb8, 0xa2, 0x80, 0xef, 0x38, 0x0c, 0x3d, 0x83, 0x3a, 0x19, 0x45, 0xc1,
	0x64, 0xce, 0xa8, 0x73, 0x49, 0xbd, 0x8b, 0x4b, 0xd6, 0x2a, 0x3c, 0xb2, 0x9e, 0x56, 0x8f, 0x56,
	0x70, 0x4d, 0x23, 0x8e, 0x04, 0x9c, 0x93, 0x86, 0x74, 0x42, 0x98, 0x77, 0x1d, 0x93, 0x16, 0x35,
	0xa9, 0x46, 0x28, 0xd2, 0xc7, 0x50, 0x76, 0x03, 0xff, 0xdc, 0x61, 0x24, 0xbc, 0xa0, 0xac, 0xb5,
	0x2a, 0xc8, 0x2c, 0x0c, 0x1c, 0x78, 0x26, 0x60, 0xe8, 0x1e, 0x94, 0x3c, 0xdf, 0x63, 0x1e, 0x61,
	0x41, 0xd8, 0x5a, 0x7b, 0x64, 0x3d, 0x2d, 0xe1, 0x04, 0xb0, 0xdf, 0x80, 0x9a, 0x96, 0x9d, 0xde,
	0xce, 0xbc, 0xf0, 0xfd, 0xfe, 0x3a, 0xac, 0x9e, 0x53, 0x1a, 0xd9, 0x14, 0x9a, 0x5f, 0xcf, 0x03,
	0x46, 0xbf, 0x8f, 0xb2, 0x19, 0xb1, 0xb4, 0xa2, 0x86, 0x58, 0xf1, 0x36, 0x37, 0xb0, 0x9d, 0xde,
	0x26, 0x9a, 0x05, 0x7e, 0x44, 0xd1, 0xef, 0xc3, 0x47, 0x53, 0xcf, 0xa7, 0xa1, 0x73, 0x4e, 0xa9,
	0x13, 0x12, 0x46, 0x9d, 0x88, 0x30, 0x67, 0x46, 0x43, 0xe7, 0xea, 0x46, 0xed, 0xb9, 0x2d, 0x08,
	0x0e, 0x29, 0xc5, 0x84, 0xd1, 0x53, 0xc2, 0x86, 0x34, 0xfc, 0xea, 0x06, 0xfd, 0x08, 0xea, 0x09,
	0x23, 0x0b, 0x18, 0x99, 0x88, 0xfd, 0x57, 0x71, 0x55, 0x93, 0x9f, 0x71, 0xa0, 0xfd, 0x1a, 0x9a,
	0xc7, 0x5e, 0xa4, 0xcf, 0x32, 0xd2, 0xfa, 0x3d, 0x84, 0x32, 0x71, 0x85, 0xe9, 0x03, 0x7f, 0xf2,
	0x5e, 0xec, 0xb4, 0x89, 0x41, 0x82, 0x4e, 0xfc, 0xc9, 0x7b, 0xfb, 0x00, 0xb6, 0xd3, 0x7c, 0x4a,
	0xe0, 0x4f, 0x61, 0x53, 0xd9, 0x20, 0x6a, 0x59, 0x8f, 0x8a, 0x4f, 0xcb, 0x7b, 0x8d, 0x17, 0xca,
	0xb1, 0x5e, 0x68, 0xe5, 0x62, 0x0a, 0xfb, 0xa7, 0xb0, 0x7e, 0x32, 0x67, 0xb3, 0x39, 0x43, 0x77,
	0xa1, 0x24, 0x0c, 0xc9, 0xf5, 0x53, 0x8a, 0x6d, 0x0a, 0xc0, 0x29, 0x61, 0xa8, 0x05, 0x1b, 0x64,
	0x3c, 0x0e, 0x69, 0x14, 0x09, 0x25, 0x4a, 0x58, 0x7f, 0xda, 0xbf, 0xb1, 0xa0, 0x2a, 0x57, 0xf8,
	0x85, 0xc7, 0x2e, 0x0f, 0x29, 0x35, 0x69, 0xad, 0x14, 0xed, 0xb7, 0x38, 0x0e, 0xf4, 0x02, 0x9a,
	0x79, 0x86, 0xe6, 0x7e, 0xb7, 0x7a, 0xb4, 0x82, 0xeb, 0xe7, 0x69, 0x2b, 0xc7, 0xc7, 0xd7, 0x85,
	0x5d, 0x29, 0x45, 0xc4, 0xc5, 0xe8, 0x4f, 0x67, 0x13, 0xcf, 0xf5, 0x18, 0x17, 0xe7, 0x19, 0x6c,
	0x04, 0x12, 0xa3, 0xcc, 0x51, 0x8f, 0xcd, 0x21, 0x39, 0xb0, 0xc6, 0xdb, 0xff, 0x66, 0x41, 0xb3,
	0x3b, 0x09, 0xa2, 0xac, 0xaf, 0xdd, 0x07, 0x90, 0x81, 0xea, 0x5c, 0x51, 0x79, 0x14, 0x15, 0x5c,
	0x92, 0x90, 0xaf, 0xe8, 0x7b, 0xf4, 0x33, 0xa8, 0xcb, 0x15, 0x9c, 0x1b, 0x8f, 0x5d, 0xf2, 0xf3,
	0x16, 0xaa, 0x95, 0xf7, 0x76, 0x33, 0x3b, 0x29, 0x0b, 0x1d, 0xad, 0xe0, 0x6a, 0x90, 0x32, 0xd9,
	0x1f, 0x26, 0x32, 0x16, 0x05, 0xe7, 0xc3, 0x0c, 0x67, 0x56, 0xab, 0xa3, 0x95, 0x58, 0xea, 0xfd,
	0x26, 0x6c, 0x9d, 0xcf, 0xfd, 0x71, 0xe4, 0x8c, 0x69, 0xc4, 0x3c, 0x9f, 0xf0, 0x5c, 0x61, 0xbf,
	0x82, 0xed, 0xb4, 0x26, 0xca, 0x3b, 0xee, 0x03, 0xb8, 0x1c, 0xee, 0xb0, 0x5b, 0x6f, 0xac, 0x55,
	0x11, 0x90, 0xb3, 0x5b, 0x6f, 0x6c, 0xff, 0x8d, 0x05, 0xbb, 0x7c, 0xab, 0x71, 0x48, 0x6e, 0xbe,
	0x9b, 0x11, 0x0c, 0x33, 0x17, 0xbe, 0xd9, 0xcc, 0xe8, 0xd3, 0x6f, 0x38, 0xe3, 0x85, 0x13, 0xb6,
	0x7f, 0x0d, 0x77, 0x16, 0x24, 0x52, 0xca, 0x3c, 0x87, 0x0d, 0xe5, 0xc8, 0x42, 0x9e, 0x3c, 0x4f,
	0xd7, 0x04, 0x3c, 0x5f, 0xdc, 0xa8, 0x65, 0xa4, 0xee, 0x05, 0xa1, 0x41, 0x45, 0x03, 0x85, 0xfa,
	0x7f, 0x69, 0xc1, 0xce, 0x01, 0x9d, 0x05, 0xd1, 0x42, 0x6e, 0xfd, 0x80, 0xf6, 0xf7, 0x01, 0xc8,
	0x54, 0x24, 0x23, 0x1e, 0x3d, 0x32, 0xce, 0x4b, 0x12, 0xc2, 0xc3, 0xe7, 0xbb, 0x69, 0x7c, 0x01,
	0xbb, 0x59, 0x21, 0xbe, 0x87, 0xc2, 0x8f, 0xa1, 0x32, 0x96, 0xab, 0x98, 0xfa, 0x96, 0x15, 0x4c,
	0xa8, 0xfb, 0x1f, 0x16, 0x34, 0x31, 0xf5, 0x69, 0xf6, 0xa8, 0x45, 0xee, 0x91, 0xb9, 0x35, 0xd1,
	0x16, 0x14, 0x48, 0x1e, 0x76, 0x72, 0x89, 0xc8, 0x74, 0xbd, 0x78, 0x89, 0xf4, 0x04, 0x3c, 0x75,
	0x89, 0x28, 0xd2, 0x85, 0x4b, 0x44, 0x91, 0x2e, 0xb1, 0xd2, 0x6a, 0xae, 0x95, 0x16, 0x6f, 0x0c,
	0x9b, 0xc2, 0x76, 0x5a, 0x9b, 0xef, 0x67, 0xb5, 0x90, 0xaf, 0x41, 0x26, 0x29, 0xab, 0x29, 0x98,
	0xb0, 0xda, 0x18, 0x76, 0xf6, 0xe7, 0xd3, 0x99, 0x62, 0xe5, 0x69, 0xff, 0xdb, 0xf9, 0xc8, 0x12,
	0xf5, 0x0a, 0xf9, 0x4e, 0xd0, 0x82, 0xdd, 0xec, 0x2e, 0x52, 0x1d, 0xfb, 0xef, 0x0a, 0xb0, 0xa1,
	0xc0, 0x1f, 0xda, 0xf2, 0x77, 0x60, 0x93, 0x07, 0x5d, 0xe0, 0xf9, 0x4c, 0xa5, 0xa4, 0x2d, 0x33,
	0x2a, 0x87, 0x1c, 0x81, 0x63, 0x12, 0xb4, 0x0d, 0x6b, 0xf2, 0x2e, 0x95, 0x8e, 0x29, 0x3f, 0xd0,
	0x27, 0xb0, 0x45, 0xae, 0x89, 0x37, 0x21, 0xa3, 0x09, 0x75, 0x46, 0x64, 0x42, 0x7c, 0x97, 0xaa,
	0x43, 0x69, 0xc4, 0x88, 0x7d, 0x09, 0xe7, 0xc4, 0xe2, 0x34, 0x44, 0x16, 0xd2, 0x55, 0x03, 0xbf,
	0xed, 0xab, 0xb8, 0x91, 0x20, 0x54, 0xd5, 0xf0, 0x09, 0xac, 0x45, 0x8c, 0x30, 0xda, 0x5a, 0x7f,
	0x64, 0x3d, 0xad, 0xed, 0xed, 0x64, 0x8f, 0xe5, 0x94, 0x23, 0xb1, 0xa4, 0xe1, 0x4e, 0x39, 0x21,
	0x8c, 0x46, 0xca, 0x9d, 0x37, 0xa4, 0x53, 0x4a, 0x90, 0x38, 0x97, 0xbf, 0xb0, 0x00, 0x9d, 0xce,
	0x47, 0x53, 0x8f, 0x9d, 0x84, 0x63, 0x1a, 0xea, 0x53, 0x79, 0x04, 0x45, 0x12, 0x5d, 0xa9, 0x93,
	0xaf, 0x24, 0x5b, 0x44, 0x57, 0x47, 0x2b, 0x98, 0xa3, 0x38, 0xc5, 0x48, 0x1d, 0xb5, 0x49, 0xb1,
	0xef, 0x8d, 0x39, 0xc5, 0xc8, 0x1b, 0xa7, 0x6b, 0x97, 0x62, 0xb6, 0x76, 0x29, 0xc1, 0xc6, 0x98,
	0x32, 0xe2, 0x4d, 0x22, 0xfb, 0xb7, 0x16, 0x34, 0x53, 0x32, 0x28, 0x17, 0xfc, 0x02, 0xaa, 0x9e,
	0x7f, 0x4d, 0x26, 0xde, 0xd8, 0x09, 0x38, 0x42, 0x89, 0x93, 0x68, 0xdc, 0x97, 0x58, 0xc1, 0x75,
	0xb4, 0x82, 0x2b, 0x9e, 0xf1, 0x8d, 0xf6, 0x60, 0x9b, 0xb8, 0x2e, 0x9d, 0x31, 0xaa, 0xd8, 0x1d,
	0x3f, 0xe0, 0x87, 0x20, 0x9c, 0xf3, 0x68, 0x05, 0x23, 0x8d, 0x15, 0xe4, 0x03, 0x8e, 0x33, 0x85,
	0x1a, 0xc0, 0x16, 0xaf, 0x14, 0x04, 0x32, 0xae, 0x2f, 0x5a, 0xb0, 0x71, 0x4d, 0xc3, 0x51, 0x10,
	0x51, 0x55, 0x5b, 0xe8, 0xcf, 0x6c, 0xe5, 0x51, 0x58, 0xa8, 0x3c, 0x7e, 0x09, 0xc8, 0x5c, 0x4f,
	0xa9, 0xf8, 0x08, 0x56, 0x49, 0x74, 0xa5, 0x2f, 0xd9, 0x94, 0xa1, 0xb1, 0xc0, 0x70, 0x8a, 0x91,
	0x37, 0xd6, 0xf7, 0x43, 0xca, 0xd0, 0x58, 0x60, 0xec, 0x57, 0x80, 0xba, 0xdc, 0x8d, 0x26, 0xa9,
	0x13, 0x7c, 0x08, 0x65, 0x53, 0x6b, 0x95, 0x8e, 0x82, 0x58, 0x57, 0x7b, 0x07, 0x9a, 0x29, 0x36,
	0x15, 0x28, 0xff, 0x59, 0x84, 0x35, 0x69, 0xc0, 0x0f, 0x67, 0x6f, 0x11, 0x95, 0xe7, 0xde, 0x2d,
	0x95, 0x7e, 0x50, 0xc5, 0x25, 0x0e, 0x39, 0xe4, 0x00, 0xd4, 0x80, 0x22, 0x99, 0x32, 0x15, 0x14,
	0xfc, 0x27, 0xfa, 0x63, 0xb8, 0x3f, 0x25, 0xb7, 0xce, 0x88, 0x30, 0xf7, 0xd2, 0x59, 0x9e, 0xb3,
	0xee, 0x4c, 0xc9, 0xed, 0x3e, 0xa7, 0xc9, 0xd6, 0x86, 0x19, 0x8d, 0xd6, 0xb2, 0x1a, 0xa1, 0x67,
	0xe9, 0xc8, 0x68, 0x26, 0x51, 0xcb, 0x69, 0x52, 0x71, 0xb1, 0x0d, 0x6b, 0x73, 0xdf, 0x63, 0x91,
	0x88, 0x88, 0x2a, 0x96, 0x1f, 0x3c, 0x0e, 0xc5, 0x0f, 0x67, 0xee, 0x9f, 0xcf, 0x27, 0xe7, 0xde,
	0x64, 0x42, 0xc7, 0xad, 0x4d, 0x19, 0x87, 0x02, 0xf1, 0x36, 0x81, 0xa3, 0x4f, 0x01, 0x85, 0x34,
	0xa2, 0xe1, 0x35, 0x1d, 0x3b, 0x49, 0x0d, 0x58, 0x92, 0x21, 0xae, 0x31, 0xef, 0x74, 0x2d, 0xb8,
	0x07, 0x3b, 0x6e, 0x48, 0x65, 0x80, 0x33, 0x6f, 0x4a, 0x23, 0x46, 0xa6, 0x33, 0xc7, 0x8f, 0x5a,
	0x20, 0x18, 0x9a, 0x1a, 0x79, 0xa6, 0x71, 0x03, 0x2e, 0xce, 0x3a, 0xbd, 0xa6, 0xbc, 0x24, 0x2d,
	0x8b, 0xc3, 0xcf, 0x28, 0xd4, 0xe3, 0x38, 0xac, 0x48, 0x54, 0xe5, 0xec, 0x48, 0xf9, 0xa7, 0xdc,
	0x7e, 0xad, 0x8a, 0x90, 0x9c, 0x57, 0xce, 0x6f, 0x39, 0xf4, 0x0d, 0x07, 0xda, 0x7f, 0x55, 0x80,
	0xe2, 0xbe, 0x37, 0x46, 0x4f, 0x63, 0x57, 0x57, 0x61, 0x55, 0x4b, 0xaf, 0x8e, 0x35, 0x9a, 0x8b,
	0x3e, 0xa1, 0x24, 0xa2, 0xce, 0x78, 0xae, 0x32, 0xd4, 0x68, 0x12, 0xb8, 0x57, 0x91, 0x3a, 0xf3,
	0xa6, 0x40, 0x1e, 0x28, 0xdc, 0xbe, 0x40, 0xa9, 0x40, 0x89, 0xbc, 0xc0, 0x97, 0x17, 0x17, 0xd6,
	0x9f, 0xe8, 0x15, 0x70, 0x81, 0x1c, 0x3f, 0x18, 0x53, 0x87, 0x79, 0x34, 0x14, 0xa7, 0x5e, 0x33,
	0x52, 0xec, 0x20, 0x18, 0xd3, 0x33, 0x8f, 0x86, 0xb8, 0x3c, 0xf5, 0x7c, 0xfd, 0x81, 0x9e, 0xc3,
	0x56, 0x44, 0x27, 0xe7, 0x8e, 0x7b, 0x49, 0xfc, 0x38, 0x9f, 0xae, 0xc9, 0x5b, 0x80, 0x23, 0xba,
	0x97, 0xc4, 0xd7, 0xe9, 0xf4, 0x09, 0xd4, 0x22, 0x6f, 0x4c, 0x5d, 0x12, 0x3a, 0xcc, 0x73, 0xaf,
	0x28, 0x13, 0x0e, 0x51, 0xc2, 0x55, 0x05, 0x3d, 0x13, 0x40, 0xfb, 0xcf, 0xa1, 0xd8, 0x89, 0xae,
	0xfe, 0xbf, 0x0c, 0x61, 0xff, 0x97, 0x05, 0x5b, 0xa2, 0x79, 0x4a, 0x85, 0xad, 0x0a, 0x1b, 0x2b,
	0x09, 0x9b, 0x0f, 0xc4, 0xd9, 0x52, 0xa1, 0x8a, 0xcb, 0x85, 0xfa, 0xbf, 0x46, 0x62, 0x8e, 0xaf,
	0xad, 0xe5, 0xf9, 0xda, 0xff, 0x58, 0x80, 0x4c, 0x15, 0xe3, 0xd2, 0x62, 0x4b, 0xb4, 0x76, 0xce,
	0x2c, 0xa4, 0x53, 0x6f, 0x3e, 0x35, 0x9a, 0xa7, 0xba, 0x40, 0x0c, 0x25, 0x9c, 0xc7, 0xcd, 0x0f,
	0xa1, 0x26, 0x84, 0xe3, 0x82, 0x09, 0xc5, 0x84, 0x05, 0x2c, 0x5c, 0xe1, 0xd0, 0x21, 0x0d, 0x85,
	0x46, 0xa2, 0x00, 0x51, 0x54, 0x2e, 0xf5, 0x65, 0xd6, 0xb1, 0x70, 0x59, 0xd1, 0x70, 0x10, 0x7a,
	0x05, 0x77, 0xe4, 0xa6, 0xf4, 0x96, 0xba, 0x73, 0x61, 0x28, 0xae, 0x39, 0xdf, 0x5a, 0x6a, 0xbb,
	0x2d, 0xd0, 0x3d, 0x8d, 0x3d, 0xa4, 0x22, 0x6e, 0x5f, 0x43, 0xeb, 0x26, 0x08, 0x23, 0xe6, 0xb8,
	0xdc, 0xc6, 0xee, 0x25, 0xf1, 0x12, 0x3e, 0xe9, 0x7e, 0xdb, 0x02, 0xdf, 0x25, 0x11, 0xed, 0x72,
	0xac, 0xe4, 0xb3, 0xff, 0xd5, 0x02, 0x48, 0xa2, 0x94, 0x0b, 0x98, 0x8a, 0x7a, 0xae, 0x6d, 0x11,
	0x97, 0x99, 0x11, 0xed, 0x77, 0xa1, 0x24, 0x42, 0xd9, 0x89, 0x58, 0xa8, 0xfa, 0xc5, 0x4d, 0x01,
	0x38, 0x65, 0x21, 0xfa, 0x1c, 0x2a, 0x22, 0x71, 0x09, 0xff, 0xbf, 0xa0, 0xaa, 0xe1, 0x49, 0x6e,
	0xc2, 0xb7, 0xb3, 0x31, 0x61, 0x74, 0x2c, 0x36, 0x3b, 0x5a, 0xc1, 0x65, 0x41, 0xdc, 0x15, 0xb4,
	0xe8, 0x25, 0x6c, 0x88, 0x33, 0xa2, 0x63, 0xa1, 0xa9, 0x99, 0x47, 0xc4, 0x31, 0x69, 0x26, 0x4d,
	0xb5, 0xbf, 0x01, 0x6b, 0x62, 0x63, 0xfb, 0x1f, 0x2c, 0xa8, 0x98, 0x2b, 0xa3, 0xcf, 0xa1, 0x36,
	0x0b, 0xe9, 0xb5, 0x17, 0xcc, 0x23, 0x47, 0xa6, 0x5a, 0x6b, 0x79, 0xaa, 0xad, 0x6a, 0x52, 0xf1,
	0x89, 0x7e, 0x0c, 0x25, 0x9f, 0xde, 0x28, 0xb6, 0xc2, 0x72, 0xb6, 0x4d, 0x9f, 0xde, 0x48, 0x8e,
	0xc7, 0x50, 0x91, 0x2e, 0xa6, 0x32, 0xb1, 0xf4, 0xe8, 0xb2, 0x80, 0x1d, 0x0a, 0x90, 0xfd, 0xef,
	0x16, 0x40, 0xa2, 0x04, 0xfa, 0x09, 0x94, 0x85, 0x12, 0x4b, 0x84, 0x13, 0x94, 0x72, 0x17, 0x98,
	0xc6, 0xbf, 0x17, 0xf6, 0x29, 0x2c, 0xec, 0xc3, 0x1b, 0x21, 0x65, 0x1d, 0x55, 0x8a, 0x14, 0x65,
	0x23, 0xa4, 0x80, 0xf2, 0xc2, 0xfc, 0x29, 0x54, 0x43, 0xfa, 0x6b, 0xea, 0x32, 0x27, 0xa4, 0x24,
	0x0a, 0x7c, 0x95, 0xda, 0xda, 0xe9, 0xfd, 0xb1, 0x20, 0xc1, 0x82, 0x02, 0x57, 0x42, 0xe3, 0x8b,
	0x97, 0xaf, 0x98, 0xba, 0xc1, 0x35, 0x0d, 0x33, 0x83, 0x0d, 0xfb, 0x04, 0xee, 0x2c, 0x60, 0x54,
	0x34, 0xfd, 0x04, 0x76, 0xfd, 0xf9, 0xd4, 0x09, 0x25, 0x9a, 0x8e, 0x1d, 0x63, 0x90, 0xc1, 0xf5,
	0xd8, 0xf6, 0xe7, 0x53, 0xac, 0x91, 0x9a, 0xdb, 0x6e, 0xc2, 0x56, 0x47, 0x4e, 0xc8, 0x92, 0x5a,
	0xdc, 0x1e, 0x02, 0x32, 0x81, 0x6a, 0x83, 0xcf, 0xa1, 0x9a, 0x8a, 0x99, 0x85, 0x32, 0xcc, 0x8c,
	0x19, 0x5c, 0xa1, 0xc6, 0x97, 0xfd, 0x8f, 0x6b, 0xb0, 0x76, 0xcc, 0x33, 0x10, 0x7a, 0x0d, 0x55,
	0xee, 0xbb, 0x3e, 0x9d, 0x38, 0xb2, 0xb4, 0xb6, 0x96, 0x95, 0xd6, 0x15, 0x45, 0x27, 0xbe, 0x78,
	0xae, 0xd1, 0x7c, 0x64, 0x6a, 0x76, 0x8a, 0x7a, 0xb9, 0xce, 0x94, 0xc9, 0x40, 0xbd, 0xa3, 0xe9,
	0xf2, 0x33, 0xe1, 0x8e, 0x42, 0x67, 0x72, 0xe1, 0x8f, 0x61, 0x5b, 0xf3, 0xc9, 0x3c, 0xaa, 0xfa,
	0x2d, 0x31, 0x8d, 0xc3, 0x48, 0xe1, 0x84, 0x0e, 0xaa, 0xe3, 0x7a, 0x08, 0x65, 0x33, 0x71, 0xc9,
	0x2c, 0x00, 0xb3, 0x24, 0x67, 0x3d, 0xe7, 0xe5, 0x7c, 0x36, 0xc9, 0xac, 0xcb, 0xfc, 0x46, 0x33,
	0xf9, 0xc5, 0x16, 0x66, 0x31, 0x92, 0xca, 0x86, 0xa0, 0x2b, 0xbb, 0x49, 0x2e, 0x41, 0x2f, 0xa0,
	0xe9, 0x4e, 0x28, 0x09, 0x3d, 0xff, 0x42, 0x66, 0xea, 0x59, 0xe8, 0xb9, 0x54, 0x14, 0x26, 0xab,
	0x78, 0x4b, 0xa3, 0x78, 0x86, 0x1e, 0x72, 0x04, 0x7a, 0x0a, 0x0d, 0x59, 0x28, 0x89, 0x2b, 0x43,
	0xb0, 0xa8, 0xba, 0xa4, 0x26, 0xe0, 0xe2, 0xe2, 0xc0, 0xaa, 0x3d, 0x30, 0x4b, 0x2a, 0x58, 0x28,
	0xa9, 0xee, 0x41, 0x69, 0x36, 0x0f, 0xdd, 0x4b, 0x12, 0xd1, 0x71, 0xab, 0x2c, 0x8a, 0xda, 0x04,
	0xc0, 0x73, 0xaa, 0xb6, 0x5d, 0x48, 0xa7, 0x01, 0xa3, 0xf2, 0x5a, 0xe7, 0xe5, 0x62, 0x45, 0x2c,
	0xa5, 0x4d, 0x8b, 0x05, 0x96, 0x5f, 0xe6, 0xbc, 0x72, 0xfc, 0x23, 0xd8, 0xd2, 0x6c, 0x49, 0x19,
	0x50, 0x5d, 0x56, 0x06, 0xe8, 0xe3, 0xff, 0xe6, 0x52, 0xa0, 0x96, 0x5f, 0x0a, 0x7c, 0x0c, 0x75,
	0x5d, 0x0a, 0xa8, 0x65, 0x5a, 0x75, 0xa1, 0x85, 0xae, 0x10, 0xba, 0x12, 0x6a, 0x1f, 0x41, 0x55,
	0x9c, 0x71, 0x5c, 0xea, 0xdf, 0x85, 0x92, 0xbc, 0x1f, 0x79, 0xf1, 0xcd, 0xcb, 0xf3, 0x0a, 0xde,
	0x14, 0x80, 0xfe, 0x38, 0x42, 0x6d, 0x63, 0x5c, 0x58, 0x90, 0xb8, 0x78, 0x38, 0xf8, 0xf7, 0x16,
	0xd4, 0xf4, 0x52, 0x2a, 0x82, 0x7e, 0x04, 0xeb, 0xc2, 0xb7, 0x74, 0x9d, 0x9f, 0x54, 0x18, 0x82,
	0x10, 0x2b, 0x2c, 0x7a, 0x09, 0xf2, 0x12, 0x12, 0x9e, 0x4e, 0x49, 0xe8, 0xd3, 0xb1, 0xe1, 0xf0,
	0xf2, 0xd2, 0xec, 0x4c, 0x59, 0x4f, 0x60, 0xb8, 0x67, 0x7c, 0x02, 0x28, 0x61, 0x98, 0x11, 0x4f,
	0x92, 0x17, 0x8d, 0xab, 0xb4, 0x33, 0x65, 0x43, 0xe2, 0x71, 0x62, 0xbb, 0x0e, 0xd5, 0xb3, 0xe0,
	0x8a, 0xfa, 0x71, 0x52, 0xf9, 0x02, 0x6a, 0x1a, 0x10, 0xdf, 0xcc, 0xeb, 0x4c, 0x40, 0x94, 0xa0,
	0x28, 0x11, 0x34, 0x22, 0x4c, 0x10, 0x63, 0x45, 0x61, 0xff, 0x73, 0x01, 0x4a, 0x31, 0x94, 0x27,
	0xc8, 0x11, 0x8f, 0x9e, 0x29, 0x71, 0x49, 0x18, 0x04, 0xbe, 0xea, 0x17, 0x2a, 0x1c, 0xf8, 0x46,
	0xc1, 0x78, 0xa2, 0x9d, 0x91, 0xf7, 0x53, 0x7e, 0xc9, 0x5d, 0x92, 0xe8, 0x52, 0xcf, 0x09, 0x14,
	0xec, 0x88, 0x44, 0x97, 0xe8, 0x19, 0x34, 0x34, 0xc9, 0x2c, 0xa4, 0xde, 0x94, 0xa8, 0xcb, 0xae,
	0x82, 0xeb, 0x0a, 0x3e, 0x54, 0x60, 0xee, 0xe6, 0x6a, 0x7c, 0x24, 0x34, 0x9f, 0xea, 0xab, 0xbc,
	0x88, 0x6b, 0x12, 0xce, 0x15, 0x7f, 0x13, 0x11, 0x86, 0x7e, 0x17, 0x76, 0xc2, 0x60, 0xce, 0x78,
	0xfc, 0xf0, 0x30, 0x4b, 0xc8, 0xd7, 0x04, 0x39, 0x52, 0xc8, 0x43, 0x4a, 0x63, 0x16, 0x75, 0x61,
	0x3b, 0xa2, 0x2e, 0xa7, 0x63, 0x11, 0xbe, 0xea, 0xc2, 0xee, 0x4a, 0x10, 0x2f, 0xed, 0x44, 0xae,
	0xa0, 0xb2, 0xaf, 0xde, 0xc4, 0xfa, 0x93, 0x33, 0x47, 0x2c, 0x08, 0xc9, 0x05, 0x75, 0x7c, 0x32,
	0x95, 0x91, 0x5a, 0xe2, 0x97, 0xb2, 0x80, 0x0d, 0xc8, 0x94, 0xda, 0xbb, 0xb0, 0x7d, 0x6c, 0x56,
	0x66, 0xfa, 0x4c, 0x7e, 0x5b, 0x84, 0x9d, 0x0c, 0x42, 0x9d, 0x8d, 0x03, 0xf5, 0x74, 0xa1, 0xa7,
	0x0f, 0x69, 0x2f, 0xed, 0x4d, 0x59, 0xc6, 0x34, 0x34, 0xea, 0xf9, 0x2c, 0x7c, 0xbf, 0x5f, 0x68,
	0x59, 0xb8, 0x96, 0x2a, 0x0d, 0x23, 0xe4, 0xc3, 0x6e, 0xb6, 0x92, 0x9c, 0xf3, 0x42, 0x59, 0xf7,
	0x9e, 0x9f, 0x7d, 0x97, 0x7d, 0xf6, 0x25, 0xab, 0xd8, 0x0d, 0x6f, 0x4f, 0x72, 0x50, 0xed, 0x0e,
	0x34, 0x73, 0x44, 0xe3, 0x15, 0xb0, 0xee, 0x37, 0xab, 0x98, 0xff, 0x4c, 0x26, 0x2c, 0xb2, 0xab,
	0x96, 0x1f, 0x9f, 0x17, 0x3e, 0xb3, 0xda, 0x14, 0x3e, 0x5a, 0xba, 0x6b, 0xce, 0x42, 0x7b, 0xe6,
	0x42, 0xb5, 0xbd, 0x7b, 0xb1, 0x42, 0x69, 0x7e, 0xd5, 0x29, 0xc6, 0xdb, 0xf0, 0xc3, 0x1a, 0xd0,
	0x5b, 0x26, 0x6a, 0xe1, 0xbe, 0x7f, 0x1e, 0xe8, 0xc3, 0xfa, 0x6b, 0x0b, 0x76, 0x32, 0x08, 0x75,
	0x58, 0x0f, 0xd3, 0x43, 0x7b, 0x59, 0x1d, 0x9b, 0x23, 0xfb, 0x25, 0x73, 0xad, 0xf5, 0xdc, 0xb9,
	0x16, 0x4f, 0x63, 0x22, 0xcd, 0x27, 0xad, 0xa3, 0xba, 0x27, 0x6a, 0x02, 0x1c, 0x37, 0x8d, 0xf6,
	0x6b, 0xd8, 0xe2, 0x79, 0x12, 0x13, 0xee, 0xcf, 0x3a, 0x95, 0x3d, 0x86, 0x8a, 0xc8, 0xb3, 0xb3,
	0xf9, 0xe8, 0x8a, 0xbe, 0xd7, 0xd9, 0xac, 0xcc, 0x61, 0x43, 0x09, 0xb2, 0x8f, 0x01, 0x99, 0x7c,
	0x4a, 0x8b, 0xd7, 0x8a, 0x31, 0x14, 0x60, 0xed, 0x6f, 0xcd, 0x54, 0x8e, 0x56, 0x2c, 0x62, 0x35,
	0xf9, 0x3b, 0xb2, 0x1b, 0x50, 0xfb, 0x92, 0x32, 0xd3, 0x52, 0xbf, 0x59, 0x87, 0x7a, 0x0c, 0x52,
	0xab, 0x1b, 0xad, 0x91, 0x7a, 0xf2, 0xd0, 0x3d, 0xe2, 0x93, 0x78, 0x4a, 0x19, 0x19, 0x8f, 0x40,
	0x55, 0xac, 0x1f, 0xaf, 0x22, 0xf1, 0x08, 0xc4, 0xad, 0x12, 0x93, 0xc9, 0x49, 0x8b, 0xba, 0xea,
	0x63, 0xee, 0x8e, 0x80, 0xf2, 0xda, 0x20, 0x43, 0xe8, 0xe8, 0xc8, 0x95, 0xd7, 0xfc, 0x4e, 0x9a,
	0xa1, 0xa7, 0xe2, 0xf8, 0x13, 0xd8, 0x4a, 0xf8, 0x42, 0xf7, 0xd2, 0xbb, 0xa6, 0x63, 0x3d, 0x97,
	0x8b, 0x39, 0x14, 0x9c, 0x5b, 0x59, 0x5c, 0x9c, 0x5a, 0xe4, 0x75, 0x59, 0x45, 0x4a, 0x98, 0x14,
	0xf8, 0x07, 0x50, 0x55, 0x24, 0x4a, 0x5c, 0x39, 0x7d, 0x50, 0x7c, 0x4a, 0xd8, 0x8f, 0xa1, 0xae,
	0x89, 0xf4, 0x96, 0x72, 0x04, 0x51, 0x53, 0x64, 0x7a, 0x43, 0x5e, 0xb9, 0xcc, 0xc3, 0x90, 0xa7,
	0x4a, 0x51, 0xe8, 0xe8, 0xc1, 0x61, 0x49, 0x55, 0x2e, 0x12, 0x27, 0xca, 0x9c, 0xf8, 0x6d, 0xb2,
	0x21, 0xae, 0x30, 0x1a, 0x39, 0x9e, 0x7f, 0x1d, 0x4c, 0xf8, 0xda, 0x20, 0xa8, 0xeb, 0x0a, 0xde,
	0x57, 0x60, 0x5e, 0x49, 0x1b, 0x47, 0x2f, 0xae, 0xfe, 0x25, 0x27, 0x0f, 0xc9, 0xc9, 0x8b, 0x71,
	0x23, 0xf7, 0x66, 0x75, 0x89, 0xc8, 0x01, 0x04, 0x4c, 0xf4, 0x2d, 0x11, 0xa1, 0xcf, 0xa0, 0x15,
	0xcd, 0x47, 0x91, 0x1b, 0x7a, 0x23, 0x3a, 0x76, 0x58, 0xe0, 0x24, 0xcf, 0xb4, 0xa2, 0x02, 0xd8,
	0xc4, 0xbb, 0x09, 0xfe, 0x2c, 0xe8, 0xc4, 0x58, 0xde, 0x08, 0xf2, 0xf6, 0x81, 0x6f, 0x16, 0xc9,
	0x19, 0x5b, 0x4d, 0xd0, 0x57, 0x7c, 0x7a, 0xc3, 0xa5, 0x89, 0x4e, 0xfc, 0xc9, 0x7b, 0xd4, 0xe7,
	0x0d, 0x40, 0x78, 0x45, 0x99, 0xe3, 0xf9, 0xe7, 0x41, 0xab, 0x2e, 0x1c, 0xf6, 0x69, 0x2c, 0x76,
	0xc6, 0x05, 0x5f, 0xbc, 0x11, 0xb4, 0x1c, 0x24, 0x13, 0x15, 0x4c, 0x63, 0x40, 0x1b, 0x43, 0x3d,
	0x83, 0xce, 0xc9, 0x28, 0xcf, 0xcc, 0x8c, 0x92, 0xee, 0xac, 0x34, 0xab, 0x99, 0x48, 0x9a, 0xb0,
	0x75, 0xca, 0x82, 0xd9, 0x01, 0xa1, 0xd3, 0x24, 0xe5, 0x6f, 0x03, 0x32, 0x81, 0x6a, 0x0e, 0xf7,
	0xa7, 0xd0, 0x3c, 0x39, 0x3f, 0xa7, 0xe1, 0xa9, 0xac, 0x53, 0x74, 0x2c, 0xf3, 0xd0, 0x98, 0xb3,
	0xc0, 0xf1, 0xe9, 0x45, 0xc0, 0x3c, 0xdd, 0xe4, 0x6c, 0xe2, 0x2a, 0x87, 0x0e, 0x34, 0x10, 0x3d,
	0x58, 0x3a, 0x9d, 0x15, 0xb3, 0x59, 0xfb, 0x63, 0xa8, 0x9e, 0x9a, 0xc3, 0x10, 0xb4, 0x0b, 0xeb,
	0x6a, 0x56, 0x22, 0x63, 0x51, 0x7d, 0xd9, 0xbf, 0xe0, 0x2d, 0xc9, 0x85, 0x17, 0xb1, 0x05, 0x49,
	0x96, 0x70, 0xe4, 0x48, 0x58, 0xc8, 0x91, 0xd0, 0x7e, 0x05, 0x77, 0x7b, 0xb7, 0x33, 0xea, 0xb2,
	0xd3, 0x54, 0x21, 0xf6, 0x81, 0xd5, 0xed, 0x07, 0x70, 0x2f, 0x9f, 0x4d, 0x9a, 0xed, 0xf9, 0xdf,
	0x5a, 0x50, 0x31, 0x07, 0xe1, 0xa8, 0x01, 0x95, 0x61, 0x6f, 0x70, 0xd0, 0x1f, 0x7c, 0xe9, 0x9c,
	0x0c, 0x7b, 0x83, 0xc6, 0x0a, 0x42, 0x50, 0xd3, 0x90, 0xb7, 0xc3, 0x83, 0xce, 0x59, 0xaf, 0x61,
	0xa1, 0x4d, 0x58, 0x15, 0xd8, 0x02, 0x2a, 0xc3, 0x46, 0xef, 0x97, 0xc3, 0x3e, 0xee, 0x1d, 0x34,
	0x8a, 0x26, 0x69, 0xf7, 0xf8, 0xe4, 0xb4, 0x77, 0xd0, 0x58, 0x45, 0x00, 0xeb, 0xea, 0xf7, 0x1a,
	0x6a, 0x42, 0x1d, 0xf7, 0xba, 0x27, 0xef, 0x7a, 0xf8, 0x4f, 0x9c, 0xc3, 0x4e, 0xff, 0xb8, 0x77,
	0xd0, 0x58, 0x47, 0x5b, 0x50, 0xd5, 0x4c, 0xfb, 0x9d, 0xb3, 0xee, 0x51, 0x63, 0xe3, 0xf9, 0x50,
	0x75, 0xa9, 0x52, 0xa4, 0x32, 0x6c, 0x0c, 0x71, 0x6f, 0xd8, 0xc1, 0xbd, 0xc6, 0x0a, 0xaa, 0xc0,
	0x66, 0xa7, 0xdb, 0xed, 0x0d, 0xcf, 0x7a, 0x07, 0x0d, 0x8b, 0x7f, 0xe1, 0xde, 0xcf, 0x7b, 0x5d,
	0xfe, 0x55, 0xe0, 0x5b, 0x9d, 0xf6, 0xbf, 0x1c, 0x08, 0x51, 0xaa, 0x50, 0x3a, 0xec, 0x0f, 0x3a,
	0xc7, 0xfd, 0x5f, 0x71, 0x29, 0x9e, 0xff, 0x8b, 0x05, 0x5b, 0x0b, 0xed, 0x24, 0x57, 0x63, 0x70,
	0x32, 0xe0, 0xcb, 0xee, 0x02, 0x3a, 0xed, 0xe1, 0x77, 0x3d, 0xec, 0xbc, 0xe9, 0x9f, 0xee, 0xf7,
	0x8e, 0x3a, 0xef, 0xfa, 0x27, 0xb8, 0x61, 0xa1, 0x36, 0xec, 0x0a, 0xa1, 0x9c, 0x77, 0x3d, 0x7c,
	0xda, 0x3f, 0x19, 0x70, 0xf4, 0x1b, 0x21, 0x65, 0x01, 0xdd, 0x87, 0x8f, 0x86, 0x1d, 0x7c, 0xd6,
	0xef, 0x1c, 0x3b, 0x52, 0x08, 0xa7, 0x7b, 0x72, 0x7c, 0xdc, 0x39, 0xeb, 0xe1, 0xce, 0x71, 0xa3,
	0x88, 0x1e, 0xc3, 0xfd, 0x0c, 0xfa, 0xe0, 0xed, 0xf0, 0xb8, 0xdf, 0xed, 0x9c, 0xf5, 0x9c, 0x61,
	0xaf, 0x87, 0x1b, 0xab, 0xe8, 0x19, 0x3c, 0xc9, 0xae, 0x70, 0xd4, 0x19, 0x0c, 0x7a, 0xc7, 0xce,
	0xe1, 0x5b, 0x69, 0x11, 0x65, 0xa5, 0xb5, 0xbd, 0x7f, 0xaa, 0xc3, 0xfa, 0x99, 0x18, 0x26, 0xa3,
	0x2f, 0x60, 0x43, 0x05, 0x26, 0xba, 0xb3, 0x18, 0xaa, 0xc2, 0x1f, 0xda, 0xad, 0x65, 0x31, 0x8c,
	0x7a, 0x00, 0x49, 0xf8, 0xa0, 0xa4, 0xd9, 0x5e, 0x08, 0xb4, 0xf6, 0xdd, 0x5c, 0x9c, 0x5a, 0xe6,
	0x2b, 0xa8, 0x98, 0x7f, 0x65, 0x40, 0x49, 0x71, 0x90, 0xf3, 0x47, 0x8a, 0xf6, 0xfd, 0x25, 0xd8,
	0xf8, 0xe5, 0xa2, 0x6c, 0xfc, 0xd5, 0x04, 0xdd, 0x35, 0x5e, 0x2c, 0xb2, 0x8f, 0xa4, 0xed, 0x85,
	0x77, 0x35, 0x2e, 0x8a, 0xf9, 0x27, 0x05, 0x43, 0x94, 0x9c, 0xff, 0x3c, 0x18, 0xa2, 0xe4, 0xfe,
	0xb3, 0xe1, 0x2b, 0xa8, 0x98, 0x6f, 0xda, 0xc6, 0x62, 0x39, 0x8f, 0xf6, 0xc6, 0x62, 0xb9, 0x0f,
	0xe1, 0x67, 0x50, 0xcf, 0x3c, 0x2b, 0xa3, 0xe4, 0xd1, 0x3d, 0xff, 0x09, 0xbc, 0xfd, 0x68, 0x39,
	0x81, 0x5a, 0xf5, 0x6b, 0xa8, 0xa5, 0x9f, 0x6e, 0xd1, 0x83, 0xa4, 0x32, 0xcb, 0x7b, 0x58, 0x6e,
	0x3f, 0x5c, 0x8a, 0x4f, 0xb4, 0x36, 0x5f, 0x35, 0x0d, 0xad, 0x73, 0x9e, 0x6e, 0x0d, 0xad, 0x73,
	0x9f, 0x42, 0xbf, 0x86, 0x5a, 0xfa, 0x55, 0xd1, 0x90, 0x2f, 0xf7, 0x51, 0xd3, 0x90, 0x2f, 0xff,
	0x39, 0x92, 0x1b, 0x32, 0x33, 0xcf, 0x31, 0x0c, 0x99, 0x3f, 0x03, 0x32, 0x0c, 0xb9, 0x6c, 0x14,
	0x74, 0x04, 0x65, 0xe3, 0x1d, 0xcd, 0x70, 0xbb, 0xc5, 0x17, 0xbe, 0xf6, 0xbd, 0x7c, 0x64, 0x12,
	0x54, 0xc9, 0x6b, 0x95, 0x11, 0x54, 0x0b, 0x4f, 0x62, 0x46, 0x50, 0xe5, 0x3c, 0x6f, 0x1d, 0x41,
	0xd9, 0x78, 0x63, 0x32, 0x04, 0x5a, 0x7c, 0xb0, 0x32, 0x04, 0xca, 0x79, 0x96, 0xe2, 0x02, 0x25,
	0x93, 0x64, 0x43, 0xa0, 0x85, 0x09, 0xba, 0x21, 0x50, 0xce, 0xe8, 0xb9, 0x07, 0x90, 0x4c, 0xb8,
	0x8c, 0x65, 0x16, 0x66, 0x61, 0xc6, 0x32, 0x39, 0x23, 0xb1, 0x13, 0xd5, 0xe2, 0x27, 0xcd, 0xd3,
	0xfd, 0x65, 0xcd, 0x91, 0x5c, 0xed, 0xc1, 0x37, 0xf7, 0x4e, 0x68, 0x00, 0xd5, 0x54, 0x23, 0x61,
	0xac, 0x97, 0xd7, 0x79, 0x18, 0xeb, 0xe5, 0xf7, 0x1f, 0x03, 0xa8, 0x0a, 0xe0, 0xa9, 0x4f, 0x66,
	0xd1, 0x65, 0xc0, 0x8c, 0xf5, 0x52, 0xf0, 0xc5, 0xf5, 0x32, 0x68, 0xb5, 0xde, 0xcf, 0xa0, 0xfa,
	0x25, 0x65, 0xc7, 0x49, 0x21, 0x97, 0xfc, 0x4b, 0x27, 0x35, 0x53, 0x68, 0xdf, 0x59, 0x80, 0xab,
	0x15, 0xfe, 0x00, 0xd6, 0xe5, 0x54, 0xc4, 0x60, 0x4d, 0x4d, 0x5c, 0x0c, 0xd6, 0xcc, 0xf8, 0xe4,
	0x10, 0xca, 0x49, 0xbd, 0x69, 0x7a, 0xe3, 0x42, 0xab, 0x63, 0x9c, 0x5a, 0x4e, 0x3b, 0xc3, 0xe3,
	0xd8, 0xd4, 0x2e, 0x42, 0x4b, 0xd4, 0x8e, 0x72, 0xe2, 0x38, 0x83, 0x57, 0x4b, 0x1e, 0x40, 0xc5,
	0xac, 0xd2, 0x8c, 0x3c, 0x93, 0x53, 0xbc, 0xb5, 0x13, 0xcd, 0xd3, 0xc5, 0xd7, 0xcf, 0x79, 0x36,
	0x48, 0x15, 0x59, 0xa9, 0x6c, 0x90, 0x57, 0x7e, 0x2d, 0x5d, 0xcb, 0x85, 0xed, 0xbc, 0x02, 0x09,
	0xfd, 0xd0, 0x18, 0xd7, 0x2e, 0x2d, 0xbb, 0xda, 0x4f, 0x3e, 0x40, 0x25, 0xd5, 0xde, 0xff, 0xf8,
	0x57, 0x4f, 0x2e, 0x3c, 0x76, 0x39, 0x1f, 0xbd, 0x70, 0x83, 0xe9, 0xcb, 0x09, 0x6f, 0x2e, 0x7c,
	0xcf, 0xbf, 0x98, 0x90, 0x51, 0xf4, 0x92, 0x2f, 0xf0, 0x52, 0xad, 0x32, 0x5a, 0x17, 0xff, 0xbd,
	0xfc, 0xbd, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x67, 0x7e, 0x6a, 0x1b, 0xb4, 0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraderClient is the client API for Trader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraderClient interface {
	// pool: `getinfo`
	//GetInfo returns general information about the state of the Pool trader
	//daemon.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// pool: `stop`
	//Stop gracefully shuts down the Pool trader daemon.
	StopDaemon(ctx context.Context, in *StopDaemonRequest, opts ...grpc.CallOption) (*StopDaemonResponse, error)
	//
	//QuoteAccount gets a fee quote to fund an account of the given size with the
	//given confirmation target. If the connected lnd wallet doesn't have enough
	//balance to fund an account of the requested size, an error is returned.
	QuoteAccount(ctx context.Context, in *QuoteAccountRequest, opts ...grpc.CallOption) (*QuoteAccountResponse, error)
	// pool: `accounts new`
	//InitAccount creates a new account with the requested size and expiration,
	//funding it from the wallet of the connected lnd node.
	InitAccount(ctx context.Context, in *InitAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// pool: `accounts list`
	//ListAccounts returns a list of all accounts known to the trader daemon and
	//their current state.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// pool: `accounts close`
	//CloseAccount closes an account and returns the funds locked in that account
	//to the connected lnd node's wallet.
	CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error)
	// pool: `accounts withdraw`
	//WithdrawAccount splits off parts of the account balance into the specified
	//outputs while recreating the account with a reduced balance.
	WithdrawAccount(ctx context.Context, in *WithdrawAccountRequest, opts ...grpc.CallOption) (*WithdrawAccountResponse, error)
	// pool: `accounts deposit`
	//DepositAccount adds more funds from the connected lnd node's wallet to an
	//account.
	DepositAccount(ctx context.Context, in *DepositAccountRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error)
	// pool: `accounts renew`
	//RenewAccount renews the expiration of an account.
	RenewAccount(ctx context.Context, in *RenewAccountRequest, opts ...grpc.CallOption) (*RenewAccountResponse, error)
	// pool: `accounts bumpfee`
	//BumpAccountFee attempts to bump the fee of an account's transaction through
	//child-pays-for-parent (CPFP). Since the CPFP is performed through the
	//backing lnd node, the account transaction must contain an output under its
	//control for a successful bump. If a CPFP has already been performed for an
	//account, and this RPC is invoked again, then a replacing transaction (RBF)
	//of the child will be broadcast.
	BumpAccountFee(ctx context.Context, in *BumpAccountFeeRequest, opts ...grpc.CallOption) (*BumpAccountFeeResponse, error)
	// pool: `accounts recover`
	//RecoverAccounts queries the auction server for this trader daemon's accounts
	//in case we lost our local account database.
	RecoverAccounts(ctx context.Context, in *RecoverAccountsRequest, opts ...grpc.CallOption) (*RecoverAccountsResponse, error)
	// pool: `orders submit`
	//SubmitOrder creates a new ask or bid order and submits for the given account
	//and submits it to the auction server for matching.
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error)
	// pool: `orders list`
	//ListOrders returns a list of all active and archived orders that are
	//currently known to the trader daemon.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// pool: `orders cancel`
	//CancelOrder cancels an active order with the auction server to remove it
	//from future matching.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	//
	//QuoteOrder calculates the premium, execution fees and max batch fee rate for
	//an order based on the given order parameters.
	QuoteOrder(ctx context.Context, in *QuoteOrderRequest, opts ...grpc.CallOption) (*QuoteOrderResponse, error)
	// pool: `auction fee`
	//AuctionFee returns the current auction order execution fee specified by the
	//auction server.
	AuctionFee(ctx context.Context, in *AuctionFeeRequest, opts ...grpc.CallOption) (*AuctionFeeResponse, error)
	// pool: `auction leasedurations`
	//LeaseDurations returns the current set of valid lease duration in the
	//market as is, and also information w.r.t if the market is currently active.
	LeaseDurations(ctx context.Context, in *LeaseDurationRequest, opts ...grpc.CallOption) (*LeaseDurationResponse, error)
	// pool: `auction nextbatchinfo`
	//NextBatchInfo returns information about the next batch the auctioneer will
	//perform.
	NextBatchInfo(ctx context.Context, in *NextBatchInfoRequest, opts ...grpc.CallOption) (*NextBatchInfoResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshot returns the snapshot of a past batch identified by its ID.
	//If no ID is provided, the snapshot of the last finalized batch is returned.
	//Deprecated, use BatchSnapshots instead.
	BatchSnapshot(ctx context.Context, in *auctioneerrpc.BatchSnapshotRequest, opts ...grpc.CallOption) (*auctioneerrpc.BatchSnapshotResponse, error)
	// pool: `listauth`
	//GetLsatTokens returns all LSAT tokens the daemon ever paid for.
	GetLsatTokens(ctx context.Context, in *TokensRequest, opts ...grpc.CallOption) (*TokensResponse, error)
	// pool: `auction leases`
	//Leases returns the list of channels that were either purchased or sold by
	//the trader within the auction.
	Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (*LeasesResponse, error)
	// pool: `auction ratings`
	//Returns the Node Tier information for this target Lightning node, and other
	//related ranking information.
	NodeRatings(ctx context.Context, in *NodeRatingRequest, opts ...grpc.CallOption) (*NodeRatingResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshots returns a list of batch snapshots starting at the start batch
	//ID and going back through the history of batches, returning at most the
	//number of specified batches. A maximum of 100 snapshots can be queried in
	//one call. If no start batch ID is provided, the most recent finalized batch
	//is used as the starting point to go back from.
	BatchSnapshots(ctx context.Context, in *auctioneerrpc.BatchSnapshotsRequest, opts ...grpc.CallOption) (*auctioneerrpc.BatchSnapshotsResponse, error)
	// pool: `sidecar offer`
	//OfferSidecar is step 1/4 of the sidecar negotiation between the provider
	//(the trader submitting the bid order) and the recipient (the trader
	//receiving the sidecar channel).
	//This step must be run by the provider. The result is a sidecar ticket with
	//an offer to lease a sidecar channel for the recipient. The offer will be
	//signed with the provider's lnd node public key. The ticket returned by this
	//call will have the state "offered".
	OfferSidecar(ctx context.Context, in *OfferSidecarRequest, opts ...grpc.CallOption) (*SidecarTicket, error)
	// pool: `sidecar register`
	//RegisterSidecarRequest is step 2/4 of the sidecar negotiation between the
	//provider (the trader submitting the bid order) and the recipient (the trader
	//receiving the sidecar channel).
	//This step must be run by the recipient. The result is a sidecar ticket with
	//the recipient's node information and channel funding multisig pubkey filled
	//in. The ticket returned by this call will have the state "registered".
	RegisterSidecar(ctx context.Context, in *RegisterSidecarRequest, opts ...grpc.CallOption) (*SidecarTicket, error)
	// pool: `sidecar expectchannel`
	//ExpectSidecarChannel is step 4/4 of the sidecar negotiation between the
	//provider (the trader submitting the bid order) and the recipient (the trader
	//receiving the sidecar channel).
	//This step must be run by the recipient once the provider has submitted the
	//bid order for the sidecar channel. From this point onwards the Pool trader
	//daemon of both the provider as well as the recipient need to be online to
	//receive and react to match making events from the server.
	ExpectSidecarChannel(ctx context.Context, in *ExpectSidecarChannelRequest, opts ...grpc.CallOption) (*ExpectSidecarChannelResponse, error)
}

type traderClient struct {
	cc *grpc.ClientConn
}

func NewTraderClient(cc *grpc.ClientConn) TraderClient {
	return &traderClient{cc}
}

func (c *traderClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) StopDaemon(ctx context.Context, in *StopDaemonRequest, opts ...grpc.CallOption) (*StopDaemonResponse, error) {
	out := new(StopDaemonResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/StopDaemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) QuoteAccount(ctx context.Context, in *QuoteAccountRequest, opts ...grpc.CallOption) (*QuoteAccountResponse, error) {
	out := new(QuoteAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/QuoteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) InitAccount(ctx context.Context, in *InitAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/InitAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error) {
	out := new(CloseAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/CloseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) WithdrawAccount(ctx context.Context, in *WithdrawAccountRequest, opts ...grpc.CallOption) (*WithdrawAccountResponse, error) {
	out := new(WithdrawAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/WithdrawAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) DepositAccount(ctx context.Context, in *DepositAccountRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error) {
	out := new(DepositAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/DepositAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) RenewAccount(ctx context.Context, in *RenewAccountRequest, opts ...grpc.CallOption) (*RenewAccountResponse, error) {
	out := new(RenewAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/RenewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) BumpAccountFee(ctx context.Context, in *BumpAccountFeeRequest, opts ...grpc.CallOption) (*BumpAccountFeeResponse, error) {
	out := new(BumpAccountFeeResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/BumpAccountFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) RecoverAccounts(ctx context.Context, in *RecoverAccountsRequest, opts ...grpc.CallOption) (*RecoverAccountsResponse, error) {
	out := new(RecoverAccountsResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/RecoverAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error) {
	out := new(SubmitOrderResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/SubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) QuoteOrder(ctx context.Context, in *QuoteOrderRequest, opts ...grpc.CallOption) (*QuoteOrderResponse, error) {
	out := new(QuoteOrderResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/QuoteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) AuctionFee(ctx context.Context, in *AuctionFeeRequest, opts ...grpc.CallOption) (*AuctionFeeResponse, error) {
	out := new(AuctionFeeResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/AuctionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) LeaseDurations(ctx context.Context, in *LeaseDurationRequest, opts ...grpc.CallOption) (*LeaseDurationResponse, error) {
	out := new(LeaseDurationResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/LeaseDurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) NextBatchInfo(ctx context.Context, in *NextBatchInfoRequest, opts ...grpc.CallOption) (*NextBatchInfoResponse, error) {
	out := new(NextBatchInfoResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/NextBatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) BatchSnapshot(ctx context.Context, in *auctioneerrpc.BatchSnapshotRequest, opts ...grpc.CallOption) (*auctioneerrpc.BatchSnapshotResponse, error) {
	out := new(auctioneerrpc.BatchSnapshotResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/BatchSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) GetLsatTokens(ctx context.Context, in *TokensRequest, opts ...grpc.CallOption) (*TokensResponse, error) {
	out := new(TokensResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/GetLsatTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (*LeasesResponse, error) {
	out := new(LeasesResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) NodeRatings(ctx context.Context, in *NodeRatingRequest, opts ...grpc.CallOption) (*NodeRatingResponse, error) {
	out := new(NodeRatingResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/NodeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) BatchSnapshots(ctx context.Context, in *auctioneerrpc.BatchSnapshotsRequest, opts ...grpc.CallOption) (*auctioneerrpc.BatchSnapshotsResponse, error) {
	out := new(auctioneerrpc.BatchSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/BatchSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) OfferSidecar(ctx context.Context, in *OfferSidecarRequest, opts ...grpc.CallOption) (*SidecarTicket, error) {
	out := new(SidecarTicket)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/OfferSidecar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) RegisterSidecar(ctx context.Context, in *RegisterSidecarRequest, opts ...grpc.CallOption) (*SidecarTicket, error) {
	out := new(SidecarTicket)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/RegisterSidecar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) ExpectSidecarChannel(ctx context.Context, in *ExpectSidecarChannelRequest, opts ...grpc.CallOption) (*ExpectSidecarChannelResponse, error) {
	out := new(ExpectSidecarChannelResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/ExpectSidecarChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraderServer is the server API for Trader service.
type TraderServer interface {
	// pool: `getinfo`
	//GetInfo returns general information about the state of the Pool trader
	//daemon.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// pool: `stop`
	//Stop gracefully shuts down the Pool trader daemon.
	StopDaemon(context.Context, *StopDaemonRequest) (*StopDaemonResponse, error)
	//
	//QuoteAccount gets a fee quote to fund an account of the given size with the
	//given confirmation target. If the connected lnd wallet doesn't have enough
	//balance to fund an account of the requested size, an error is returned.
	QuoteAccount(context.Context, *QuoteAccountRequest) (*QuoteAccountResponse, error)
	// pool: `accounts new`
	//InitAccount creates a new account with the requested size and expiration,
	//funding it from the wallet of the connected lnd node.
	InitAccount(context.Context, *InitAccountRequest) (*Account, error)
	// pool: `accounts list`
	//ListAccounts returns a list of all accounts known to the trader daemon and
	//their current state.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// pool: `accounts close`
	//CloseAccount closes an account and returns the funds locked in that account
	//to the connected lnd node's wallet.
	CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error)
	// pool: `accounts withdraw`
	//WithdrawAccount splits off parts of the account balance into the specified
	//outputs while recreating the account with a reduced balance.
	WithdrawAccount(context.Context, *WithdrawAccountRequest) (*WithdrawAccountResponse, error)
	// pool: `accounts deposit`
	//DepositAccount adds more funds from the connected lnd node's wallet to an
	//account.
	DepositAccount(context.Context, *DepositAccountRequest) (*DepositAccountResponse, error)
	// pool: `accounts renew`
	//RenewAccount renews the expiration of an account.
	RenewAccount(context.Context, *RenewAccountRequest) (*RenewAccountResponse, error)
	// pool: `accounts bumpfee`
	//BumpAccountFee attempts to bump the fee of an account's transaction through
	//child-pays-for-parent (CPFP). Since the CPFP is performed through the
	//backing lnd node, the account transaction must contain an output under its
	//control for a successful bump. If a CPFP has already been performed for an
	//account, and this RPC is invoked again, then a replacing transaction (RBF)
	//of the child will be broadcast.
	BumpAccountFee(context.Context, *BumpAccountFeeRequest) (*BumpAccountFeeResponse, error)
	// pool: `accounts recover`
	//RecoverAccounts queries the auction server for this trader daemon's accounts
	//in case we lost our local account database.
	RecoverAccounts(context.Context, *RecoverAccountsRequest) (*RecoverAccountsResponse, error)
	// pool: `orders submit`
	//SubmitOrder creates a new ask or bid order and submits for the given account
	//and submits it to the auction server for matching.
	SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error)
	// pool: `orders list`
	//ListOrders returns a list of all active and archived orders that are
	//currently known to the trader daemon.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// pool: `orders cancel`
	//CancelOrder cancels an active order with the auction server to remove it
	//from future matching.
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	//
	//QuoteOrder calculates the premium, execution fees and max batch fee rate for
	//an order based on the given order parameters.
	QuoteOrder(context.Context, *QuoteOrderRequest) (*QuoteOrderResponse, error)
	// pool: `auction fee`
	//AuctionFee returns the current auction order execution fee specified by the
	//auction server.
	AuctionFee(context.Context, *AuctionFeeRequest) (*AuctionFeeResponse, error)
	// pool: `auction leasedurations`
	//LeaseDurations returns the current set of valid lease duration in the
	//market as is, and also information w.r.t if the market is currently active.
	LeaseDurations(context.Context, *LeaseDurationRequest) (*LeaseDurationResponse, error)
	// pool: `auction nextbatchinfo`
	//NextBatchInfo returns information about the next batch the auctioneer will
	//perform.
	NextBatchInfo(context.Context, *NextBatchInfoRequest) (*NextBatchInfoResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshot returns the snapshot of a past batch identified by its ID.
	//If no ID is provided, the snapshot of the last finalized batch is returned.
	//Deprecated, use BatchSnapshots instead.
	BatchSnapshot(context.Context, *auctioneerrpc.BatchSnapshotRequest) (*auctioneerrpc.BatchSnapshotResponse, error)
	// pool: `listauth`
	//GetLsatTokens returns all LSAT tokens the daemon ever paid for.
	GetLsatTokens(context.Context, *TokensRequest) (*TokensResponse, error)
	// pool: `auction leases`
	//Leases returns the list of channels that were either purchased or sold by
	//the trader within the auction.
	Leases(context.Context, *LeasesRequest) (*LeasesResponse, error)
	// pool: `auction ratings`
	//Returns the Node Tier information for this target Lightning node, and other
	//related ranking information.
	NodeRatings(context.Context, *NodeRatingRequest) (*NodeRatingResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshots returns a list of batch snapshots starting at the start batch
	//ID and going back through the history of batches, returning at most the
	//number of specified batches. A maximum of 100 snapshots can be queried in
	//one call. If no start batch ID is provided, the most recent finalized batch
	//is used as the starting point to go back from.
	BatchSnapshots(context.Context, *auctioneerrpc.BatchSnapshotsRequest) (*auctioneerrpc.BatchSnapshotsResponse, error)
	// pool: `sidecar offer`
	//OfferSidecar is step 1/4 of the sidecar negotiation between the provider
	//(the trader submitting the bid order) and the recipient (the trader
	//receiving the sidecar channel).
	//This step must be run by the provider. The result is a sidecar ticket with
	//an offer to lease a sidecar channel for the recipient. The offer will be
	//signed with the provider's lnd node public key. The ticket returned by this
	//call will have the state "offered".
	OfferSidecar(context.Context, *OfferSidecarRequest) (*SidecarTicket, error)
	// pool: `sidecar register`
	//RegisterSidecarRequest is step 2/4 of the sidecar negotiation between the
	//provider (the trader submitting the bid order) and the recipient (the trader
	//receiving the sidecar channel).
	//This step must be run by the recipient. The result is a sidecar ticket with
	//the recipient's node information and channel funding multisig pubkey filled
	//in. The ticket returned by this call will have the state "registered".
	RegisterSidecar(context.Context, *RegisterSidecarRequest) (*SidecarTicket, error)
	// pool: `sidecar expectchannel`
	//ExpectSidecarChannel is step 4/4 of the sidecar negotiation between the
	//provider (the trader submitting the bid order) and the recipient (the trader
	//receiving the sidecar channel).
	//This step must be run by the recipient once the provider has submitted the
	//bid order for the sidecar channel. From this point onwards the Pool trader
	//daemon of both the provider as well as the recipient need to be online to
	//receive and react to match making events from the server.
	ExpectSidecarChannel(context.Context, *ExpectSidecarChannelRequest) (*ExpectSidecarChannelResponse, error)
}

// UnimplementedTraderServer can be embedded to have forward compatible implementations.
type UnimplementedTraderServer struct {
}

func (*UnimplementedTraderServer) GetInfo(ctx context.Context, req *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedTraderServer) StopDaemon(ctx context.Context, req *StopDaemonRequest) (*StopDaemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDaemon not implemented")
}
func (*UnimplementedTraderServer) QuoteAccount(ctx context.Context, req *QuoteAccountRequest) (*QuoteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteAccount not implemented")
}
func (*UnimplementedTraderServer) InitAccount(ctx context.Context, req *InitAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAccount not implemented")
}
func (*UnimplementedTraderServer) ListAccounts(ctx context.Context, req *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedTraderServer) CloseAccount(ctx context.Context, req *CloseAccountRequest) (*CloseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}
func (*UnimplementedTraderServer) WithdrawAccount(ctx context.Context, req *WithdrawAccountRequest) (*WithdrawAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAccount not implemented")
}
func (*UnimplementedTraderServer) DepositAccount(ctx context.Context, req *DepositAccountRequest) (*DepositAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccount not implemented")
}
func (*UnimplementedTraderServer) RenewAccount(ctx context.Context, req *RenewAccountRequest) (*RenewAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewAccount not implemented")
}
func (*UnimplementedTraderServer) BumpAccountFee(ctx context.Context, req *BumpAccountFeeRequest) (*BumpAccountFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpAccountFee not implemented")
}
func (*UnimplementedTraderServer) RecoverAccounts(ctx context.Context, req *RecoverAccountsRequest) (*RecoverAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAccounts not implemented")
}
func (*UnimplementedTraderServer) SubmitOrder(ctx context.Context, req *SubmitOrderRequest) (*SubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (*UnimplementedTraderServer) ListOrders(ctx context.Context, req *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedTraderServer) CancelOrder(ctx context.Context, req *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedTraderServer) QuoteOrder(ctx context.Context, req *QuoteOrderRequest) (*QuoteOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteOrder not implemented")
}
func (*UnimplementedTraderServer) AuctionFee(ctx context.Context, req *AuctionFeeRequest) (*AuctionFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionFee not implemented")
}
func (*UnimplementedTraderServer) LeaseDurations(ctx context.Context, req *LeaseDurationRequest) (*LeaseDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseDurations not implemented")
}
func (*UnimplementedTraderServer) NextBatchInfo(ctx context.Context, req *NextBatchInfoRequest) (*NextBatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextBatchInfo not implemented")
}
func (*UnimplementedTraderServer) BatchSnapshot(ctx context.Context, req *auctioneerrpc.BatchSnapshotRequest) (*auctioneerrpc.BatchSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSnapshot not implemented")
}
func (*UnimplementedTraderServer) GetLsatTokens(ctx context.Context, req *TokensRequest) (*TokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLsatTokens not implemented")
}
func (*UnimplementedTraderServer) Leases(ctx context.Context, req *LeasesRequest) (*LeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leases not implemented")
}
func (*UnimplementedTraderServer) NodeRatings(ctx context.Context, req *NodeRatingRequest) (*NodeRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRatings not implemented")
}
func (*UnimplementedTraderServer) BatchSnapshots(ctx context.Context, req *auctioneerrpc.BatchSnapshotsRequest) (*auctioneerrpc.BatchSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSnapshots not implemented")
}
func (*UnimplementedTraderServer) OfferSidecar(ctx context.Context, req *OfferSidecarRequest) (*SidecarTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferSidecar not implemented")
}
func (*UnimplementedTraderServer) RegisterSidecar(ctx context.Context, req *RegisterSidecarRequest) (*SidecarTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSidecar not implemented")
}
func (*UnimplementedTraderServer) ExpectSidecarChannel(ctx context.Context, req *ExpectSidecarChannelRequest) (*ExpectSidecarChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpectSidecarChannel not implemented")
}

func RegisterTraderServer(s *grpc.Server, srv TraderServer) {
	s.RegisterService(&_Trader_serviceDesc, srv)
}

func _Trader_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_StopDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDaemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).StopDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/StopDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).StopDaemon(ctx, req.(*StopDaemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_QuoteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).QuoteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/QuoteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).QuoteAccount(ctx, req.(*QuoteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_InitAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).InitAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/InitAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).InitAccount(ctx, req.(*InitAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/CloseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).CloseAccount(ctx, req.(*CloseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_WithdrawAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).WithdrawAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/WithdrawAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).WithdrawAccount(ctx, req.(*WithdrawAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_DepositAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).DepositAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/DepositAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).DepositAccount(ctx, req.(*DepositAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_RenewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).RenewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/RenewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).RenewAccount(ctx, req.(*RenewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_BumpAccountFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpAccountFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).BumpAccountFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/BumpAccountFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).BumpAccountFee(ctx, req.(*BumpAccountFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_RecoverAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).RecoverAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/RecoverAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).RecoverAccounts(ctx, req.(*RecoverAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/SubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_QuoteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).QuoteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/QuoteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).QuoteOrder(ctx, req.(*QuoteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_AuctionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).AuctionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/AuctionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).AuctionFee(ctx, req.(*AuctionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_LeaseDurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).LeaseDurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/LeaseDurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).LeaseDurations(ctx, req.(*LeaseDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_NextBatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextBatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).NextBatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/NextBatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).NextBatchInfo(ctx, req.(*NextBatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_BatchSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auctioneerrpc.BatchSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).BatchSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/BatchSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).BatchSnapshot(ctx, req.(*auctioneerrpc.BatchSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_GetLsatTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).GetLsatTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/GetLsatTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).GetLsatTokens(ctx, req.(*TokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).Leases(ctx, req.(*LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_NodeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).NodeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/NodeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).NodeRatings(ctx, req.(*NodeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_BatchSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auctioneerrpc.BatchSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).BatchSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/BatchSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).BatchSnapshots(ctx, req.(*auctioneerrpc.BatchSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_OfferSidecar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferSidecarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).OfferSidecar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/OfferSidecar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).OfferSidecar(ctx, req.(*OfferSidecarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_RegisterSidecar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSidecarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).RegisterSidecar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/RegisterSidecar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).RegisterSidecar(ctx, req.(*RegisterSidecarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_ExpectSidecarChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpectSidecarChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).ExpectSidecarChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/ExpectSidecarChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).ExpectSidecarChannel(ctx, req.(*ExpectSidecarChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poolrpc.Trader",
	HandlerType: (*TraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Trader_GetInfo_Handler,
		},
		{
			MethodName: "StopDaemon",
			Handler:    _Trader_StopDaemon_Handler,
		},
		{
			MethodName: "QuoteAccount",
			Handler:    _Trader_QuoteAccount_Handler,
		},
		{
			MethodName: "InitAccount",
			Handler:    _Trader_InitAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Trader_ListAccounts_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _Trader_CloseAccount_Handler,
		},
		{
			MethodName: "WithdrawAccount",
			Handler:    _Trader_WithdrawAccount_Handler,
		},
		{
			MethodName: "DepositAccount",
			Handler:    _Trader_DepositAccount_Handler,
		},
		{
			MethodName: "RenewAccount",
			Handler:    _Trader_RenewAccount_Handler,
		},
		{
			MethodName: "BumpAccountFee",
			Handler:    _Trader_BumpAccountFee_Handler,
		},
		{
			MethodName: "RecoverAccounts",
			Handler:    _Trader_RecoverAccounts_Handler,
		},
		{
			MethodName: "SubmitOrder",
			Handler:    _Trader_SubmitOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Trader_ListOrders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Trader_CancelOrder_Handler,
		},
		{
			MethodName: "QuoteOrder",
			Handler:    _Trader_QuoteOrder_Handler,
		},
		{
			MethodName: "AuctionFee",
			Handler:    _Trader_AuctionFee_Handler,
		},
		{
			MethodName: "LeaseDurations",
			Handler:    _Trader_LeaseDurations_Handler,
		},
		{
			MethodName: "NextBatchInfo",
			Handler:    _Trader_NextBatchInfo_Handler,
		},
		{
			MethodName: "BatchSnapshot",
			Handler:    _Trader_BatchSnapshot_Handler,
		},
		{
			MethodName: "GetLsatTokens",
			Handler:    _Trader_GetLsatTokens_Handler,
		},
		{
			MethodName: "Leases",
			Handler:    _Trader_Leases_Handler,
		},
		{
			MethodName: "NodeRatings",
			Handler:    _Trader_NodeRatings_Handler,
		},
		{
			MethodName: "BatchSnapshots",
			Handler:    _Trader_BatchSnapshots_Handler,
		},
		{
			MethodName: "OfferSidecar",
			Handler:    _Trader_OfferSidecar_Handler,
		},
		{
			MethodName: "RegisterSidecar",
			Handler:    _Trader_RegisterSidecar_Handler,
		},
		{
			MethodName: "ExpectSidecarChannel",
			Handler:    _Trader_ExpectSidecarChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trader.proto",
}
